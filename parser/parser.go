// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 406,
	-2, 160,
	-1, 35,
	166, 514,
	167, 514,
	-2, 504,
	-1, 281,
	119, 902,
	-2, 898,
	-1, 282,
	119, 903,
	-2, 899,
	-1, 283,
	119, 904,
	-2, 248,
	-1, 325,
	268, 913,
	-2, 793,
	-1, 359,
	86, 1154,
	-2, 85,
	-1, 360,
	86, 1104,
	-2, 86,
	-1, 366,
	86, 1083,
	-2, 871,
	-1, 368,
	86, 1128,
	-2, 873,
	-1, 629,
	268, 913,
	-2, 542,
	-1, 679,
	268, 913,
	-2, 542,
	-1, 709,
	55, 40,
	57, 40,
	-2, 42,
	-1, 741,
	116, 1078,
	251, 1078,
	257, 1078,
	-2, 285,
	-1, 742,
	116, 1079,
	251, 1079,
	257, 1079,
	-2, 286,
	-1, 743,
	251, 1081,
	257, 1081,
	-2, 320,
	-1, 744,
	251, 1082,
	257, 1082,
	-2, 320,
	-1, 745,
	251, 1183,
	257, 1183,
	-2, 327,
	-1, 746,
	251, 1129,
	257, 1129,
	-2, 320,
	-1, 747,
	251, 1134,
	257, 1134,
	-2, 327,
	-1, 748,
	116, 1132,
	251, 1132,
	257, 1132,
	-2, 292,
	-1, 750,
	116, 1182,
	251, 1182,
	257, 1182,
	-2, 327,
	-1, 751,
	251, 1168,
	257, 1168,
	-2, 340,
	-1, 752,
	251, 1174,
	257, 1174,
	-2, 340,
	-1, 753,
	251, 1122,
	257, 1122,
	-2, 340,
	-1, 754,
	251, 1118,
	257, 1118,
	-2, 340,
	-1, 756,
	116, 1077,
	251, 1077,
	257, 1077,
	-2, 301,
	-1, 757,
	116, 1172,
	251, 1172,
	257, 1172,
	-2, 302,
	-1, 758,
	116, 1120,
	251, 1120,
	257, 1120,
	-2, 303,
	-1, 759,
	116, 1117,
	251, 1117,
	257, 1117,
	-2, 304,
	-1, 760,
	116, 1109,
	251, 1109,
	257, 1109,
	-2, 305,
	-1, 762,
	116, 1181,
	251, 1181,
	257, 1181,
	-2, 307,
	-1, 765,
	116, 1090,
	251, 1090,
	257, 1090,
	-2, 277,
	-1, 766,
	116, 1170,
	251, 1170,
	257, 1170,
	-2, 320,
	-1, 767,
	116, 1171,
	251, 1171,
	257, 1171,
	-2, 320,
	-1, 768,
	116, 1091,
	251, 1091,
	257, 1091,
	-2, 320,
	-1, 769,
	116, 1092,
	251, 1092,
	257, 1092,
	-2, 320,
	-1, 770,
	116, 1093,
	251, 1093,
	257, 1093,
	-2, 320,
	-1, 771,
	116, 1161,
	251, 1161,
	257, 1161,
	-2, 283,
	-1, 772,
	116, 1195,
	251, 1195,
	257, 1195,
	-2, 284,
	-1, 773,
	116, 1101,
	251, 1101,
	257, 1101,
	-2, 310,
	-1, 774,
	116, 1138,
	251, 1138,
	257, 1138,
	-2, 311,
	-1, 775,
	116, 1116,
	251, 1116,
	257, 1116,
	-2, 312,
	-1, 776,
	116, 1139,
	251, 1139,
	257, 1139,
	-2, 313,
	-1, 777,
	116, 1102,
	251, 1102,
	257, 1102,
	-2, 314,
	-1, 778,
	116, 1126,
	251, 1126,
	257, 1126,
	-2, 315,
	-1, 779,
	116, 1125,
	251, 1125,
	257, 1125,
	-2, 316,
	-1, 780,
	116, 1127,
	251, 1127,
	257, 1127,
	-2, 317,
	-1, 781,
	116, 1076,
	251, 1076,
	257, 1076,
	-2, 259,
	-1, 782,
	116, 1173,
	251, 1173,
	257, 1173,
	-2, 260,
	-1, 783,
	116, 1162,
	251, 1162,
	257, 1162,
	-2, 261,
	-1, 784,
	116, 1164,
	251, 1164,
	257, 1164,
	-2, 262,
	-1, 785,
	116, 1121,
	251, 1121,
	257, 1121,
	-2, 263,
	-1, 786,
	116, 1106,
	251, 1106,
	257, 1106,
	-2, 264,
	-1, 787,
	116, 1107,
	251, 1107,
	257, 1107,
	-2, 265,
	-1, 788,
	116, 1155,
	251, 1155,
	257, 1155,
	-2, 266,
	-1, 789,
	116, 1074,
	251, 1074,
	257, 1074,
	-2, 267,
	-1, 790,
	116, 1075,
	251, 1075,
	257, 1075,
	-2, 268,
	-1, 791,
	116, 1146,
	251, 1146,
	257, 1146,
	-2, 322,
	-1, 792,
	116, 1095,
	251, 1095,
	257, 1095,
	-2, 322,
	-1, 793,
	116, 1099,
	251, 1099,
	257, 1099,
	-2, 322,
	-1, 794,
	116, 1094,
	251, 1094,
	257, 1094,
	-2, 324,
	-1, 795,
	116, 1133,
	251, 1133,
	257, 1133,
	-2, 324,
	-1, 796,
	116, 1124,
	251, 1124,
	257, 1124,
	-2, 275,
	-1, 797,
	116, 1163,
	251, 1163,
	257, 1163,
	-2, 276,
	-1, 874,
	119, 906,
	-2, 901,
	-1, 918,
	116, 340,
	268, 340,
	383, 340,
	-2, 253,
	-1, 919,
	268, 305,
	383, 305,
	-2, 254,
	-1, 920,
	268, 306,
	383, 306,
	-2, 255,
	-1, 943,
	268, 913,
	-2, 320,
	-1, 944,
	57, 320,
	59, 320,
	241, 320,
	-2, 1081,
	-1, 945,
	57, 755,
	-2, 1090,
	-1, 946,
	57, 320,
	-2, 1091,
	-1, 947,
	57, 324,
	-2, 1094,
	-1, 948,
	57, 758,
	-2, 1109,
	-1, 950,
	57, 320,
	-2, 1129,
	-1, 951,
	57, 761,
	-2, 1160,
	-1, 952,
	57, 320,
	-2, 1170,
	-1, 953,
	57, 764,
	-2, 1179,
	-1, 954,
	57, 766,
	-2, 1074,
	-1, 955,
	57, 767,
	-2, 1076,
	-1, 956,
	57, 768,
	-2, 1106,
	-1, 957,
	57, 769,
	-2, 1124,
	-1, 958,
	57, 324,
	-2, 1133,
	-1, 959,
	57, 771,
	-2, 1162,
	-1, 960,
	57, 772,
	-2, 1163,
	-1, 961,
	57, 773,
	-2, 1173,
	-1, 962,
	57, 774,
	-2, 1099,
	-1, 963,
	57, 775,
	-2, 1146,
	-1, 964,
	57, 320,
	-2, 1092,
	-1, 965,
	57, 320,
	-2, 1093,
	-1, 966,
	57, 778,
	-2, 1161,
	-1, 967,
	57, 779,
	-2, 1168,
	-1, 968,
	57, 320,
	-2, 1183,
	-1, 969,
	57, 782,
	-2, 1132,
	-1, 970,
	57, 320,
	-2, 1134,
	-1, 971,
	57, 320,
	-2, 1182,
	-1, 1047,
	142, 416,
	-2, 1088,
	-1, 1173,
	268, 913,
	-2, 542,
	-1, 1183,
	116, 320,
	268, 320,
	383, 320,
	-2, 249,
	-1, 1197,
	5, 27,
	-2, 668,
	-1, 1240,
	5, 26,
	-2, 842,
	-1, 1289,
	59, 381,
	-2, 378,
	-1, 1307,
	119, 904,
	-2, 248,
	-1, 1573,
	5, 26,
	-2, 94,
	-1, 1575,
	5, 26,
	-2, 96,
	-1, 1628,
	5, 27,
	-2, 843,
	-1, 1701,
	5, 26,
	-2, 95,
	-1, 1735,
	5, 26,
	-2, 845,
	-1, 1816,
	58, 107,
	-2, 179,
	-1, 1819,
	58, 107,
	-2, 179,
	-1, 1891,
	189, 53,
	-2, 179,
	-1, 1930,
	58, 107,
	-2, 178,
	-1, 1955,
	5, 27,
	-2, 846,
	-1, 2114,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21008

var yyAct = [...]int16{
	370, 1791, 732, 21, 2070, 1750, 1948, 1794, 1847, 1940,
	2071, 1892, 1121, 560, 1894, 632, 3, 287, 1634, 1787,
	995, 1962, 731, 277, 1568, 633, 1638, 857, 1256, 1278,
	1281, 1661, 1929, 544, 95, 1243, 558, 95, 807, 1870,
	614, 1520, 1567, 315, 1477, 1033, 1747, 265, 1508, 1013,
	1478, 1651, 701, 1360, 703, 1474, 286, 1304, 282, 269,
	1189, 95, 95, 264, 1129, 1042, 1130, 1306, 1036, 53,
	290, 1107, 1312, 298, 258, 95, 1057, 1261, 996, 932,
	942, 813, 1089, 899, 95, 1178, 95, 1102, 1184, 928,
	719, 365, 95, 1248, 1343, 981, 361, 876, 566, 1083,
	1052, 1073, 510, 1820, 989, 718, 992, 705, 346, 358,
	690, 285, 849, 344, 739, 734, 733, 259, 260, 261,
	262, 657, 575, 1325, 1075, 927, 2095, 1423, 1166, 345,
	583, 349, 586, 52, 1071, 1428, 2062, 273, 601, 602,
	603, 604, 605, 606, 607, 1538, 584, 585, 582, 608,
	609, 610, 611, 588, 587, 597, 598, 590, 591, 592,
	593, 594, 595, 596, 589, 1071, 1072, 599, 500, 1515,
	599, 615, 1788, 46, 512, 48, 25, 26, 518, 517,
	1667, 592, 593, 594, 595, 596, 589, 1806, 2052, 599,
	1060, 1639, 1640, 1641, 1642, 1643, 1644, 1616, 1807, 589,
	1118, 1119, 599, 1521, 1524, 1067, 1675, 1055, 1522, 1523,
	1838, 519, 520, 355, 1056, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 1302, 353, 599,
	1980, 1981, 2126, 2033, 2120, 1953, 1852, 95, 1851, 1074,
	2107, 588, 587, 597, 598, 590, 591, 592, 593, 594,
	595, 596, 589, 542, 1079, 599, 590, 591, 592, 593,
	594, 595, 596, 589, 1039, 2045, 599, 282, 282, 1185,
	1186, 1122, 1063, 1999, 1058, 1068, 1257, 1181, 2032, 282,
	1469, 1977, 1065, 1064, 1952, 1622, 569, 521, 1528, 1501,
	1502, 1500, 282, 282, 282, 282, 282, 282, 282, 1027,
	1028, 720, 1813, 721, 1026, 90, 86, 87, 1269, 88,
	552, 1268, 1812, 846, 1270, 1607, 1606, 282, 1605, 1327,
	847, 1077, 628, 1461, 1090, 986, 282, 1421, 1079, 1079,
	1420, 1419, 1103, 1211, 1618, 559, 1204, 1079, 568, 1209,
	257, 2124, 537, 1317, 95, 1319, 1318, 2020, 805, 2103,
	505, 95, 95, 95, 559, 616, 2104, 1808, 1809, 1811,
	2118, 2117, 1135, 1810, 2067, 2076, 1887, 1793, 1580, 1581,
	1766, 1871, 548, 549, 2119, 351, 1664, 1941, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	361, 1619, 599, 2051, 2105, 2053, 1401, 588, 587, 597,
	598, 590, 591, 592, 593, 594, 595, 596, 589, 92,
	1061, 599, 539, 1516, 993, 541, 1062, 1942, 1587, 1288,
	54, 349, 507, 1522, 1523, 1053, 1732, 1597, 1514, 1669,
	1715, 600, 1668, 1751, 600, 1588, 815, 354, 1296, 815,
	1295, 1283, 1054, 2085, 538, 540, 1826, 1753, 2123, 511,
	515, 662, 663, 600, 1422, 526, 83, 84, 84, 523,
	1704, 524, 1839, 559, 825, 1920, 600, 531, 804, 508,
	1260, 814, 1259, 588, 587, 597, 598, 590, 591, 592,
	593, 594, 595, 596, 589, 1526, 2075, 599, 1258, 504,
	1289, 503, 1069, 600, 1070, 545, 546, 547, 522, 550,
	1104, 49, 304, 89, 516, 1090, 554, 1054, 1676, 648,
	1416, 1183, 1082, 1662, 1663, 1665, 1066, 236, 95, 600,
	85, 1752, 1398, 95, 1402, 798, 95, 618, 619, 95,
	600, 2111, 1852, 95, 588, 587, 597, 598, 590, 591,
	592, 593, 594, 595, 596, 589, 1185, 1186, 599, 2100,
	2044, 1843, 1659, 1659, 95, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1724, 1631, 1286, 364, 1546, 501, 1301, 1411,
	716, 95, 509, 282, 282, 513, 514, 1224, 1038, 1951,
	282, 710, 282, 1172, 855, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	723, 816, 817, 631, 816, 817, 861, 579, 803, 536,
	532, 806, 533, 873, 818, 1556, 860, 818, 921, 820,
	1921, 1922, 1923, 852, 834, 1159, 877, 1014, 1016, 1399,
	282, 574, 1397, 1035, 1034, 1053, 282, 282, 282, 282,
	282, 282, 282, 282, 1218, 1406, 1400, 282, 1863, 1862,
	1861, 938, 1054, 878, 1860, 931, 600, 1859, 973, 975,
	1858, 832, 883, 1857, 983, 934, 573, 572, 572, 935,
	937, 874, 1557, 2019, 1855, 600, 881, 882, 880, 282,
	282, 282, 282, 574, 574, 95, 985, 282, 95, 95,
	95, 95, 95, 1577, 573, 572, 1271, 573, 572, 870,
	95, 1473, 1246, 95, 997, 722, 2116, 95, 872, 1015,
	1160, 574, 95, 95, 574, 905, 663, 902, 938, 685,
	2115, 1220, 904, 282, 2113, 1471, 1749, 1405, 709, 982,
	922, 925, 1280, 1765, 930, 559, 810, 982, 1012, 1229,
	682, 939, 940, 364, 364, 364, 364, 978, 364, 361,
	1768, 600, 1764, 573, 572, 364, 979, 1032, 349, 349,
	349, 349, 349, 1279, 1021, 2088, 1292, 1219, 2087, 988,
	574, 525, 1856, 349, 1280, 2050, 1280, 824, 577, 573,
	572, 2049, 349, 987, 2048, 990, 991, 1280, 835, 836,
	837, 838, 839, 840, 841, 842, 574, 999, 1000, 1963,
	1002, 95, 843, 844, 95, 1965, 2046, 95, 1963, 1010,
	1731, 2011, 600, 95, 1018, 95, 1019, 998, 1291, 1964,
	1001, 95, 1136, 1024, 95, 1023, 95, 1686, 1964, 95,
	618, 619, 1328, 1961, 1040, 1091, 1092, 1093, 1094, 650,
	651, 652, 653, 654, 655, 656, 1778, 1086, 1694, 1201,
	1088, 1200, 50, 2047, 282, 282, 282, 282, 1693, 364,
	528, 529, 530, 879, 1751, 1533, 725, 1109, 858, 859,
	573, 572, 1691, 1328, 1168, 1169, 1170, 1171, 1753, 1350,
	1105, 1106, 282, 282, 282, 1348, 1324, 574, 1190, 873,
	866, 868, 869, 821, 1685, 854, 1334, 867, 822, 1328,
	1333, 826, 1599, 900, 829, 901, 1344, 1116, 587, 597,
	598, 590, 591, 592, 593, 594, 595, 596, 589, 573,
	572, 599, 1873, 50, 877, 936, 1298, 630, 630, 848,
	282, 1885, 2131, 82, 853, 1853, 574, 282, 1982, 559,
	573, 572, 1656, 2106, 282, 1519, 862, 874, 1739, 2059,
	1182, 878, 1752, 573, 572, 1167, 1518, 574, 1656, 2040,
	1885, 2039, 2036, 2035, 1992, 1191, 54, 1194, 1195, 1517,
	574, 2025, 559, 1656, 2022, 1197, 1198, 1199, 1174, 1290,
	282, 1272, 1109, 282, 1124, 95, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 343, 913, 1105, 1106, 1656, 2021, 1656,
	1993, 1739, 1938, 1928, 738, 738, 799, 802, 1240, 559,
	1739, 1790, 1739, 1775, 1882, 1225, 831, 1615, 830, 1207,
	1231, 95, 811, 1187, 1233, 1234, 364, 1235, 1236, 809,
	1212, 1739, 559, 1876, 1192, 534, 1986, 364, 364, 364,
	364, 364, 364, 364, 364, 1742, 1741, 1739, 1740, 1875,
	1988, 364, 364, 1656, 1655, 1263, 527, 1265, 1497, 559,
	994, 1630, 559, 1125, 46, 1127, 1563, 1562, 1784, 95,
	1274, 1783, 282, 1264, 1559, 1560, 1228, 1559, 1558, 577,
	1193, 559, 364, 1157, 1226, 936, 559, 1983, 1022, 1238,
	1782, 349, 687, 559, 1239, 1253, 1297, 730, 729, 588,
	587, 597, 598, 590, 591, 592, 593, 594, 595, 596,
	589, 95, 1779, 599, 50, 95, 1266, 95, 738, 1711,
	1698, 924, 924, 1886, 1687, 1885, 713, 1682, 1314, 926,
	1678, 1602, 1553, 1475, 364, 1337, 1244, 1339, 1340, 1341,
	1342, 1552, 1547, 46, 976, 1316, 1020, 46, 712, 976,
	1284, 1285, 1287, 1365, 1244, 1245, 1361, 1850, 686, 2030,
	95, 95, 282, 1329, 1330, 54, 1332, 1245, 1335, 1336,
	714, 1223, 712, 1734, 282, 1364, 1112, 1193, 1365, 1115,
	282, 282, 1120, 2006, 687, 600, 1346, 1347, 1128, 976,
	1134, 1345, 1349, 50, 282, 1626, 1137, 50, 50, 1154,
	687, 1155, 687, 282, 1156, 1371, 1413, 1193, 1656, 1677,
	1576, 1561, 1244, 1368, 1565, 1564, 1366, 1222, 364, 1275,
	282, 282, 282, 282, 282, 282, 364, 1025, 1193, 1425,
	282, 1424, 1202, 501, 715, 856, 2121, 2027, 1881, 282,
	1984, 1985, 1987, 1989, 1990, 282, 282, 282, 1867, 1866,
	282, 1823, 1822, 282, 1786, 1785, 997, 1481, 1468, 1476,
	1777, 1415, 997, 1414, 1716, 1713, 1409, 1699, 1545, 1079,
	1108, 1572, 282, 1426, 1544, 1542, 1530, 1492, 1490, 1353,
	1103, 1429, 1303, 1479, 1277, 1458, 1249, 1250, 1460, 1110,
	1111, 1255, 1096, 1095, 1084, 64, 1470, 808, 1496, 1462,
	1499, 1367, 1507, 1848, 1113, 1872, 282, 1505, 1566, 1475,
	1354, 1252, 364, 1485, 364, 1114, 874, 828, 812, 553,
	1484, 1007, 738, 1486, 1162, 46, 1008, 48, 25, 26,
	1254, 1004, 364, 1498, 692, 695, 696, 697, 693, 1806,
	694, 698, 1005, 1378, 1506, 1003, 2082, 1006, 1537, 2031,
	1807, 1410, 1539, 647, 282, 95, 1163, 1009, 364, 696,
	697, 2079, 1314, 1534, 1276, 95, 1338, 1527, 556, 557,
	1525, 279, 1573, 1536, 1575, 1548, 1549, 600, 1551, 1316,
	728, 1554, 1555, 588, 587, 597, 598, 590, 591, 592,
	593, 594, 595, 596, 589, 561, 95, 599, 46, 535,
	48, 25, 26, 1532, 2132, 1624, 2069, 282, 562, 1717,
	1403, 1126, 1806, 62, 1550, 858, 859, 282, 827, 1574,
	1379, 1375, 1370, 1807, 1380, 1377, 1376, 1569, 1531, 1363,
	1374, 1584, 1583, 1358, 1179, 1356, 577, 57, 59, 60,
	61, 1381, 819, 700, 1299, 1413, 850, 1590, 1373, 271,
	272, 1603, 2096, 1710, 1813, 1579, 1513, 1592, 984, 266,
	263, 2054, 1945, 1832, 1812, 267, 1610, 54, 1598, 1944,
	1828, 1595, 1245, 2016, 282, 2015, 1706, 2101, 1707, 1708,
	1709, 282, 2014, 2013, 1608, 570, 1351, 1131, 1132, 1133,
	1355, 1705, 1357, 1979, 1978, 1611, 1612, 95, 1865, 1613,
	1614, 1512, 1511, 1617, 1864, 1840, 1207, 1294, 851, 1808,
	1809, 1811, 1645, 1646, 1647, 1810, 1212, 1627, 1628, 1629,
	1262, 1632, 56, 1800, 8, 1797, 7, 1813, 1798, 6,
	282, 58, 1625, 1633, 1796, 5, 1372, 1812, 1652, 364,
	1274, 921, 1586, 1037, 1666, 1712, 1650, 711, 51, 1674,
	1282, 1648, 1, 1893, 66, 65, 1672, 1947, 1722, 1427,
	506, 1293, 1117, 1671, 1188, 282, 627, 95, 302, 2102,
	2074, 288, 1637, 2007, 1321, 1890, 2002, 1684, 1919, 1323,
	1688, 1059, 1808, 1809, 1811, 1874, 1300, 67, 1810, 1998,
	1701, 1700, 1314, 1679, 1884, 1578, 1689, 1362, 692, 695,
	696, 697, 693, 95, 694, 698, 1382, 1695, 1249, 1250,
	1361, 1652, 1123, 1359, 1352, 1142, 282, 282, 1939, 282,
	282, 282, 1958, 1748, 1658, 364, 1045, 1273, 499, 1703,
	1702, 63, 1854, 1046, 1044, 1043, 1041, 1719, 1569, 1326,
	1076, 1690, 737, 1692, 735, 1735, 1721, 736, 740, 244,
	356, 699, 724, 49, 1369, 1720, 571, 1396, 1730, 364,
	1395, 600, 1138, 620, 621, 622, 623, 624, 625, 626,
	1479, 282, 1404, 349, 845, 364, 282, 1733, 1158, 1723,
	551, 246, 1743, 1744, 1745, 1762, 612, 1267, 363, 1482,
	565, 1763, 1943, 1827, 1227, 644, 1767, 980, 1746, 1769,
	282, 289, 865, 301, 300, 1761, 1078, 299, 1237, 581,
	1774, 1771, 1388, 348, 683, 1805, 691, 689, 688, 1251,
	1247, 1537, 1795, 347, 1601, 1621, 49, 364, 1837, 555,
	1571, 1161, 24, 55, 342, 1824, 1780, 19, 1781, 18,
	1582, 976, 1789, 17, 1483, 1262, 1815, 976, 20, 16,
	15, 14, 1842, 28, 1849, 1814, 1804, 13, 12, 1829,
	1831, 11, 1833, 1834, 1835, 1836, 10, 9, 1803, 1845,
	1802, 1594, 1801, 1569, 282, 1846, 364, 1799, 1479, 1841,
	1509, 4, 268, 1389, 22, 2, 282, 0, 0, 1391,
	1384, 1385, 1830, 1392, 1387, 1386, 0, 0, 1805, 1394,
	1390, 0, 0, 0, 1877, 1888, 0, 0, 1321, 1868,
	1393, 1879, 0, 282, 282, 0, 0, 1383, 0, 0,
	0, 0, 0, 1880, 0, 0, 1883, 0, 1878, 0,
	275, 0, 0, 282, 0, 0, 1924, 1927, 0, 0,
	0, 282, 798, 0, 0, 0, 0, 1936, 1937, 0,
	1931, 1932, 1933, 1934, 1935, 0, 1570, 1959, 997, 1569,
	0, 1954, 0, 0, 0, 0, 0, 1946, 1973, 0,
	1585, 0, 0, 1589, 1950, 1889, 1591, 0, 0, 1955,
	0, 1966, 1967, 1968, 1969, 1970, 1593, 282, 0, 0,
	0, 1805, 1974, 0, 2008, 0, 1971, 1972, 2003, 0,
	1995, 0, 1996, 0, 1596, 0, 1976, 0, 1975, 0,
	0, 0, 0, 1991, 364, 2010, 0, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 1994, 1805, 599,
	1997, 0, 0, 0, 1221, 2017, 0, 2005, 0, 0,
	0, 0, 1697, 316, 47, 282, 282, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 2029, 0, 0, 0, 0, 2024, 2023, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	0, 47, 599, 1635, 0, 0, 1635, 1635, 1635, 270,
	1649, 2037, 2038, 2058, 350, 0, 2061, 364, 1805, 364,
	2042, 2043, 974, 0, 0, 2063, 2041, 0, 2065, 2064,
	0, 0, 1805, 1805, 1805, 2073, 2068, 2072, 2056, 0,
	1795, 282, 2060, 1635, 0, 2078, 2077, 2081, 2055, 0,
	2057, 1683, 2084, 0, 0, 0, 0, 0, 0, 364,
	0, 0, 2080, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 282, 2091, 0, 0, 1570, 1696, 2008,
	0, 0, 0, 0, 1805, 1635, 1805, 1805, 0, 364,
	364, 2099, 0, 1888, 2099, 0, 95, 2086, 0, 1714,
	564, 0, 0, 0, 0, 2110, 0, 563, 567, 0,
	1718, 0, 2112, 2092, 0, 0, 0, 2093, 0, 580,
	0, 0, 2114, 0, 0, 0, 0, 0, 0, 0,
	2108, 0, 0, 2127, 93, 0, 282, 256, 1805, 2128,
	0, 0, 1805, 1737, 1738, 0, 0, 0, 0, 2099,
	0, 0, 0, 0, 0, 2122, 0, 634, 276, 0,
	0, 93, 93, 0, 0, 0, 645, 0, 0, 1509,
	0, 0, 0, 0, 0, 93, 2133, 2134, 0, 0,
	0, 1770, 0, 0, 93, 0, 93, 0, 0, 0,
	0, 0, 93, 0, 543, 543, 543, 543, 0, 543,
	0, 0, 0, 600, 0, 0, 543, 0, 0, 0,
	0, 0, 1570, 0, 0, 1180, 0, 1792, 0, 0,
	0, 0, 0, 0, 47, 0, 1816, 0, 0, 1635,
	0, 0, 0, 0, 613, 0, 0, 0, 617, 588,
	587, 597, 598, 590, 591, 592, 593, 594, 595, 596,
	589, 0, 1844, 599, 0, 0, 0, 0, 629, 0,
	0, 0, 0, 1175, 1176, 1177, 600, 0, 0, 0,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 0,
	646, 0, 649, 649, 649, 649, 649, 649, 649, 649,
	0, 678, 679, 680, 681, 0, 0, 0, 1570, 1509,
	0, 0, 81, 0, 702, 0, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 0, 1891,
	599, 1916, 1917, 1918, 0, 620, 0, 0, 0, 1930,
	1816, 1816, 1930, 1816, 1816, 1509, 1509, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 71, 76, 1956, 68, 0, 0,
	0, 1957, 0, 0, 0, 1960, 0, 0, 0, 0,
	72, 0, 79, 0, 0, 0, 0, 0, 0, 1792,
	1509, 0, 0, 46, 0, 48, 25, 26, 73, 74,
	69, 0, 0, 0, 1635, 0, 1148, 1806, 2000, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 1807, 0,
	1147, 0, 0, 863, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 658,
	0, 0, 2012, 0, 0, 0, 0, 0, 0, 0,
	1152, 0, 0, 1930, 93, 0, 0, 0, 0, 0,
	1146, 93, 707, 93, 2026, 0, 0, 0, 0, 0,
	1080, 1081, 2098, 1085, 660, 0, 1087, 0, 0, 0,
	933, 2109, 0, 0, 0, 0, 634, 543, 0, 941,
	972, 0, 0, 1097, 1098, 1099, 1100, 1101, 543, 543,
	543, 543, 543, 543, 543, 543, 0, 0, 0, 0,
	0, 0, 543, 543, 1143, 1140, 1141, 0, 1139, 0,
	0, 0, 1813, 0, 0, 0, 0, 600, 0, 2066,
	0, 0, 1812, 0, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 0, 0, 0, 0, 1150, 1153,
	1509, 0, 0, 0, 0, 661, 0, 2083, 0, 0,
	0, 0, 70, 676, 659, 0, 0, 0, 0, 665,
	664, 1417, 1418, 1031, 0, 0, 0, 1808, 1809, 1811,
	0, 47, 0, 1810, 46, 0, 48, 25, 26, 738,
	75, 0, 2097, 0, 600, 0, 0, 0, 1806, 635,
	0, 0, 77, 78, 0, 80, 0, 0, 0, 1807,
	0, 1463, 1464, 1465, 1466, 1467, 0, 0, 0, 0,
	0, 46, 0, 48, 25, 26, 0, 0, 93, 0,
	0, 0, 1145, 93, 364, 1806, 93, 0, 0, 93,
	0, 1081, 1098, 833, 1792, 0, 1807, 0, 0, 0,
	0, 350, 350, 350, 350, 350, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 1144, 702, 0, 1017, 677,
	1203, 1205, 0, 1206, 0, 350, 0, 1208, 0, 1210,
	0, 93, 0, 0, 0, 46, 0, 48, 25, 26,
	833, 1213, 1214, 0, 0, 1215, 0, 1216, 1217, 1806,
	0, 0, 0, 0, 1164, 1165, 0, 567, 0, 0,
	1807, 0, 0, 1813, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 1812, 0, 0, 1149, 0, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 658, 1151, 0, 0, 276, 276, 0,
	1813, 0, 977, 276, 0, 252, 0, 977, 0, 0,
	1812, 0, 0, 0, 0, 0, 0, 0, 1808, 1809,
	1811, 0, 0, 543, 1810, 543, 0, 0, 660, 0,
	0, 0, 0, 0, 2018, 0, 0, 1196, 0, 276,
	276, 276, 276, 543, 0, 93, 0, 977, 93, 93,
	93, 93, 93, 0, 0, 1808, 1809, 1811, 1604, 1331,
	1011, 1810, 237, 93, 1813, 0, 0, 707, 239, 0,
	0, 2004, 93, 93, 1812, 245, 241, 0, 0, 0,
	0, 0, 0, 1230, 0, 0, 0, 1173, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 0, 906,
	907, 0, 908, 909, 910, 912, 911, 243, 903, 661,
	0, 247, 0, 0, 0, 0, 0, 676, 659, 1808,
	1809, 1811, 0, 665, 664, 1810, 0, 0, 46, 23,
	48, 25, 26, 1680, 1308, 1309, 1310, 0, 0, 0,
	0, 0, 1313, 1311, 312, 313, 0, 0, 41, 0,
	0, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	1331, 93, 49, 0, 93, 0, 0, 93, 0, 0,
	0, 0, 0, 93, 36, 93, 0, 0, 50, 0,
	0, 93, 0, 0, 93, 0, 93, 238, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 1241, 1242, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 240, 0, 248,
	249, 250, 251, 255, 350, 0, 0, 0, 254, 253,
	0, 0, 0, 0, 29, 30, 32, 31, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 1725, 1726, 0,
	1727, 1728, 1729, 49, 0, 0, 0, 0, 0, 0,
	35, 42, 43, 0, 0, 44, 45, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 1541, 1543, 0, 0, 0, 0,
	0, 0, 0, 1459, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 0, 0, 0, 37, 38,
	1472, 39, 40, 0, 0, 0, 0, 0, 0, 0,
	276, 1681, 1528, 0, 0, 1232, 1487, 1488, 0, 0,
	1489, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 0, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 0, 1319,
	1318, 0, 0, 0, 0, 0, 0, 1203, 1205, 0,
	1206, 0, 0, 1208, 0, 1210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 1214, 93,
	0, 1215, 1322, 1216, 1217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 1925, 47, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 1493, 1494, 1495, 93, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 1657, 1660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1600, 0, 0,
	0, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	1407, 1408, 276, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 1432, 0, 276, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1657, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 47, 0, 1623, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 1441, 1447, 1445, 0, 0, 1442, 0, 977,
	1440, 0, 0, 1449, 0, 977, 1448, 1434, 1444, 1446,
	1443, 1438, 0, 1433, 0, 1451, 1450, 1452, 1431, 1454,
	0, 0, 0, 1457, 1436, 1456, 1455, 0, 1453, 0,
	1673, 0, 0, 0, 0, 0, 0, 1435, 949, 0,
	0, 0, 1609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 1439, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	1670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2129, 0, 0,
	0, 1772, 0, 0, 0, 0, 1776, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 1736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1869, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 1773, 0, 764, 0,
	137, 232, 233, 0, 140, 1540, 0, 186, 150, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1926, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 112, 93, 0, 0,
	0, 1825, 0, 1949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2001, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 2028, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 185, 184, 100, 193, 202, 113, 180, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 0, 791,
	792, 167, 793, 794, 795, 797, 796, 766, 915, 768,
	772, 770, 769, 771, 743, 745, 211, 741, 914, 750,
	746, 747, 748, 762, 918, 752, 753, 754, 755, 756,
	757, 758, 759, 919, 920, 763, 773, 774, 775, 776,
	777, 778, 779, 780, 0, 0, 158, 130, 916, 0,
	0, 1949, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 1322, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 2094, 0, 0, 0, 0, 0, 0,
	0, 2034, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 977, 98, 742, 139, 0, 220, 0, 171, 125,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 485, 474, 2125, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 0, 0, 0, 369, 0, 1653, 0, 1654,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 0, 0, 0, 2090, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 93, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 0, 402, 436, 0, 111, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 0, 0,
	0, 281, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 0,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 0, 402,
	436, 0, 111, 485, 474, 0, 433, 487, 403, 421,
	495, 423, 424, 460, 382, 443, 162, 418, 400, 99,
	406, 375, 413, 376, 404, 435, 123, 401, 0, 476,
	446, 137, 232, 233, 493, 140, 451, 0, 186, 150,
	0, 0, 438, 478, 441, 469, 432, 461, 390, 450,
	488, 419, 456, 489, 0, 0, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 455,
	483, 415, 498, 0, 459, 374, 453, 0, 380, 383,
	494, 481, 410, 411, 1504, 0, 0, 0, 0, 0,
	0, 437, 442, 466, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 449,
	0, 0, 0, 387, 381, 0, 434, 0, 0, 0,
	389, 0, 408, 467, 0, 371, 472, 479, 431, 146,
	213, 482, 428, 427, 169, 0, 115, 0, 192, 127,
	420, 138, 464, 496, 486, 439, 477, 405, 414, 117,
	412, 176, 163, 204, 448, 462, 174, 141, 196, 170,
	203, 484, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 379, 372, 409, 470, 473, 394, 458, 384,
	416, 465, 417, 440, 399, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 377, 0, 187, 206, 223, 224, 378, 398,
	480, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 457, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 391, 392, 444, 445, 490,
	491, 492, 468, 388, 0, 395, 396, 0, 475, 132,
	234, 235, 447, 98, 106, 139, 497, 220, 0, 171,
	125, 207, 0, 0, 422, 373, 426, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 178, 0, 430, 425,
	452, 454, 463, 471, 0, 402, 436, 0, 111, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	0, 0, 0, 281, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	0, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	0, 402, 436, 0, 111, 485, 474, 0, 433, 487,
	403, 421, 495, 423, 424, 460, 382, 443, 162, 418,
	400, 99, 406, 375, 413, 376, 404, 435, 123, 401,
	0, 476, 446, 137, 232, 233, 493, 140, 451, 0,
	186, 150, 0, 0, 438, 478, 441, 469, 432, 461,
	390, 450, 488, 419, 456, 489, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 455, 483, 415, 498, 0, 459, 374, 453, 0,
	380, 383, 494, 481, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 437, 442, 466, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 407,
	0, 449, 0, 0, 0, 387, 381, 0, 434, 0,
	0, 0, 389, 0, 408, 467, 0, 371, 472, 479,
	431, 146, 213, 482, 428, 427, 169, 0, 115, 0,
	192, 127, 420, 138, 464, 496, 486, 439, 477, 405,
	414, 117, 412, 176, 163, 204, 448, 462, 174, 141,
	196, 170, 203, 484, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 379, 372, 409, 470, 473, 394,
	458, 384, 416, 465, 417, 440, 399, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 377, 0, 187, 206, 223, 224,
	378, 398, 480, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 457, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 391, 392, 444,
	445, 490, 491, 492, 468, 388, 0, 395, 396, 0,
	475, 132, 234, 235, 447, 98, 106, 139, 497, 220,
	0, 171, 125, 207, 0, 0, 422, 373, 426, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 178, 0,
	430, 425, 452, 454, 463, 471, 0, 402, 436, 0,
	111, 485, 474, 0, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 50, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 0, 0, 0, 0, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 0, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 0, 402, 436, 0, 111, 485, 474, 0,
	433, 487, 403, 421, 495, 423, 424, 460, 382, 443,
	162, 418, 400, 99, 406, 375, 413, 376, 404, 435,
	123, 401, 0, 476, 446, 137, 232, 233, 493, 140,
	451, 0, 186, 150, 0, 0, 438, 478, 441, 469,
	432, 461, 390, 450, 488, 419, 456, 489, 0, 0,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 455, 483, 415, 498, 0, 459, 374,
	453, 0, 380, 383, 494, 481, 410, 411, 0, 0,
	0, 0, 0, 0, 0, 437, 442, 466, 429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 449, 0, 0, 0, 387, 381, 0,
	434, 0, 0, 0, 389, 0, 408, 467, 0, 371,
	472, 479, 431, 146, 213, 482, 428, 427, 169, 0,
	115, 0, 192, 127, 420, 138, 464, 496, 486, 439,
	477, 405, 414, 117, 412, 176, 163, 204, 448, 462,
	174, 141, 196, 170, 203, 484, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 379, 372, 409, 470,
	473, 394, 458, 384, 416, 465, 417, 440, 399, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 367, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 377, 0, 187, 206,
	223, 224, 378, 398, 480, 216, 217, 218, 219, 0,
	0, 0, 368, 366, 131, 181, 135, 142, 172, 221,
	457, 177, 114, 205, 183, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 391,
	392, 444, 445, 490, 491, 492, 468, 388, 0, 395,
	396, 0, 475, 132, 234, 235, 447, 98, 106, 139,
	497, 220, 0, 171, 125, 207, 0, 0, 422, 373,
	426, 0, 0, 0, 0, 0, 0, 0, 385, 386,
	178, 0, 430, 425, 452, 454, 463, 471, 0, 402,
	436, 0, 111, 485, 474, 0, 433, 487, 403, 421,
	495, 423, 424, 460, 382, 443, 162, 418, 400, 99,
	406, 375, 413, 376, 404, 435, 123, 401, 0, 476,
	446, 137, 232, 233, 493, 140, 451, 0, 186, 150,
	0, 0, 438, 478, 441, 469, 432, 461, 390, 450,
	488, 419, 456, 489, 0, 0, 0, 94, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 455,
	483, 415, 498, 0, 459, 374, 453, 0, 380, 383,
	494, 481, 410, 411, 0, 0, 0, 0, 0, 0,
	0, 437, 442, 466, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 407, 0, 449,
	0, 0, 0, 387, 381, 0, 434, 0, 0, 0,
	389, 0, 408, 467, 0, 371, 472, 479, 431, 146,
	213, 482, 428, 427, 169, 0, 115, 0, 192, 127,
	420, 138, 464, 496, 486, 439, 477, 405, 414, 117,
	412, 176, 163, 204, 448, 462, 174, 141, 196, 170,
	203, 484, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 379, 372, 409, 470, 473, 394, 458, 384,
	416, 465, 417, 440, 399, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 377, 0, 187, 206, 223, 224, 378, 398,
	480, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 457, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 393, 397, 391, 392, 444, 445, 490,
	491, 492, 468, 388, 0, 395, 396, 0, 475, 132,
	234, 235, 447, 98, 106, 139, 497, 220, 0, 171,
	125, 207, 0, 0, 422, 373, 426, 0, 0, 0,
	0, 0, 0, 0, 385, 386, 178, 0, 430, 425,
	452, 454, 463, 471, 0, 402, 436, 0, 111, 485,
	474, 0, 433, 487, 403, 421, 495, 423, 424, 460,
	382, 443, 162, 418, 400, 99, 406, 375, 413, 376,
	404, 435, 123, 401, 0, 476, 446, 137, 232, 233,
	493, 140, 451, 0, 186, 150, 0, 0, 438, 478,
	441, 469, 432, 461, 390, 450, 488, 419, 456, 489,
	0, 0, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 455, 483, 415, 498, 0,
	459, 374, 453, 0, 380, 383, 494, 481, 410, 411,
	0, 0, 0, 0, 0, 0, 0, 437, 442, 466,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 449, 0, 0, 0, 387,
	381, 0, 434, 0, 0, 0, 389, 0, 408, 467,
	0, 371, 472, 479, 431, 146, 213, 482, 428, 427,
	169, 0, 115, 0, 192, 127, 420, 138, 464, 496,
	486, 439, 477, 405, 414, 117, 412, 176, 163, 204,
	448, 462, 174, 141, 196, 170, 203, 484, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 379, 372,
	409, 470, 473, 394, 458, 384, 416, 465, 417, 440,
	399, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 717, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 367, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 377, 0,
	187, 206, 223, 224, 378, 398, 480, 216, 217, 218,
	219, 0, 0, 0, 368, 366, 131, 181, 135, 142,
	172, 221, 457, 177, 114, 205, 183, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 391, 392, 444, 445, 490, 491, 492, 468, 388,
	0, 395, 396, 0, 475, 132, 234, 235, 447, 98,
	106, 139, 497, 220, 0, 171, 125, 207, 0, 0,
	422, 373, 426, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 178, 0, 430, 425, 452, 454, 463, 471,
	0, 402, 436, 0, 111, 485, 474, 0, 433, 487,
	403, 421, 495, 423, 424, 460, 382, 443, 162, 418,
	400, 99, 406, 375, 413, 376, 404, 435, 123, 401,
	0, 476, 446, 137, 232, 233, 493, 140, 451, 0,
	186, 150, 0, 0, 438, 478, 441, 469, 432, 461,
	390, 450, 488, 419, 456, 489, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 455, 483, 415, 498, 0, 459, 374, 453, 0,
	380, 383, 494, 481, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 437, 442, 466, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	0, 449, 0, 0, 0, 387, 381, 0, 434, 0,
	0, 0, 389, 0, 408, 467, 0, 371, 472, 479,
	431, 146, 213, 482, 428, 427, 169, 0, 115, 0,
	192, 127, 420, 138, 464, 496, 486, 439, 477, 405,
	414, 117, 412, 176, 163, 204, 448, 462, 174, 141,
	196, 170, 203, 484, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 379, 372, 409, 470, 473, 394,
	458, 384, 416, 465, 417, 440, 399, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 357, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 367, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 377, 0, 187, 206, 223, 224,
	378, 398, 480, 216, 217, 218, 219, 0, 0, 0,
	368, 366, 360, 359, 135, 142, 172, 221, 457, 177,
	114, 205, 183, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 397, 391, 392, 444,
	445, 490, 491, 492, 468, 388, 0, 395, 396, 0,
	475, 132, 234, 235, 447, 98, 106, 139, 497, 220,
	0, 171, 125, 207, 0, 0, 422, 373, 426, 0,
	0, 0, 0, 0, 0, 0, 385, 386, 178, 0,
	430, 425, 452, 454, 463, 471, 0, 402, 436, 0,
	111, 485, 474, 0, 433, 487, 403, 421, 495, 423,
	424, 460, 382, 443, 162, 418, 400, 99, 406, 375,
	413, 376, 404, 435, 123, 401, 0, 476, 446, 137,
	232, 233, 493, 140, 451, 0, 186, 150, 0, 0,
	438, 478, 441, 469, 432, 461, 390, 450, 488, 419,
	456, 489, 0, 0, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 455, 483, 415,
	498, 0, 459, 374, 453, 0, 380, 383, 494, 481,
	410, 411, 0, 0, 0, 0, 0, 0, 0, 437,
	442, 466, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 449, 0, 0,
	0, 387, 381, 0, 434, 0, 0, 0, 389, 0,
	408, 467, 0, 371, 472, 479, 431, 146, 213, 482,
	428, 427, 169, 0, 115, 0, 192, 127, 420, 138,
	464, 496, 486, 439, 477, 405, 414, 117, 412, 176,
	163, 204, 448, 462, 174, 141, 196, 170, 203, 484,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	379, 372, 409, 470, 473, 394, 458, 384, 416, 465,
	417, 440, 399, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	377, 0, 187, 206, 223, 224, 378, 398, 480, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 457, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 393, 397, 391, 392, 444, 445, 490, 491, 492,
	468, 388, 0, 395, 396, 0, 475, 132, 234, 235,
	447, 98, 106, 139, 497, 220, 0, 171, 125, 207,
	0, 0, 422, 373, 426, 0, 0, 0, 0, 0,
	0, 0, 385, 386, 178, 0, 430, 425, 452, 454,
	463, 471, 162, 402, 436, 99, 111, 0, 284, 0,
	0, 0, 123, 280, 0, 0, 0, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 0, 0, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 1029, 0,
	50, 0, 0, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 1030, 0,
	0, 0, 278, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 162, 0,
	0, 99, 929, 0, 284, 0, 0, 0, 123, 280,
	0, 0, 178, 137, 232, 233, 326, 140, 327, 0,
	186, 150, 0, 336, 111, 0, 317, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 281,
	305, 283, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 312, 313, 0, 0, 0, 0, 278, 296,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 274, 0, 0,
	0, 339, 0, 295, 0, 0, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 337, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 341, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 338, 334, 335, 332,
	333, 331, 330, 329, 340, 319, 320, 321, 322, 324,
	0, 132, 234, 235, 323, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 0, 0,
	284, 0, 0, 0, 123, 280, 0, 0, 178, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 336,
	111, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 559, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 278, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 339, 0, 295,
	0, 0, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 284, 0, 0, 0,
	123, 280, 0, 0, 178, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 336, 111, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 0, 0, 0, 0,
	278, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 274,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 284, 0, 0, 0, 123, 280, 0, 0,
	178, 137, 232, 233, 326, 140, 327, 0, 186, 150,
	0, 336, 111, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 281, 305, 283,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	312, 313, 0, 0, 0, 0, 278, 296, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 339,
	0, 295, 0, 0, 943, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 337, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 955,
	961, 959, 191, 148, 956, 134, 182, 954, 102, 0,
	963, 122, 167, 962, 947, 958, 960, 957, 952, 198,
	946, 222, 965, 964, 966, 944, 968, 211, 105, 109,
	971, 950, 970, 969, 208, 967, 201, 149, 145, 0,
	104, 199, 147, 144, 948, 949, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 341, 0, 158, 130, 0,
	0, 0, 0, 0, 951, 953, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 338, 334, 335, 332, 333, 331,
	330, 329, 340, 319, 320, 321, 322, 324, 0, 132,
	234, 235, 323, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 178, 99, 0, 0,
	284, 0, 0, 0, 123, 280, 0, 336, 111, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 0,
	0, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 278, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 339, 0, 295,
	0, 0, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 284, 0, 0, 0,
	123, 280, 0, 0, 178, 137, 232, 233, 326, 140,
	327, 0, 186, 150, 0, 336, 111, 0, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 281, 305, 283, 303, 307, 308, 309, 310, 0,
	0, 112, 306, 311, 312, 313, 0, 0, 0, 0,
	278, 296, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 339, 0, 295, 0, 0, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 337, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 341,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 338, 334,
	335, 332, 333, 331, 330, 329, 340, 319, 320, 321,
	322, 324, 0, 132, 234, 235, 323, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	178, 137, 232, 233, 326, 140, 327, 0, 186, 150,
	0, 336, 111, 0, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 281, 305, 283,
	303, 307, 308, 309, 310, 0, 0, 112, 306, 311,
	312, 313, 0, 0, 0, 0, 0, 296, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 339,
	0, 295, 0, 0, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 337, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 2130, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 341, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 338, 334, 335, 332, 333, 331,
	330, 329, 340, 319, 320, 321, 322, 324, 0, 132,
	234, 235, 323, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 284, 0,
	0, 0, 123, 0, 0, 0, 178, 137, 232, 233,
	326, 140, 327, 0, 186, 150, 0, 336, 111, 0,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 281, 305, 283, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 312, 313, 0, 0,
	0, 0, 0, 296, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 339, 0, 295, 0, 0,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 337,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 341, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	338, 334, 335, 332, 333, 331, 330, 329, 340, 319,
	320, 321, 322, 324, 0, 132, 234, 235, 323, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 178, 137, 232, 233, 326, 140, 327, 0,
	186, 150, 0, 336, 111, 0, 317, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 281,
	305, 283, 303, 307, 308, 309, 310, 0, 0, 112,
	306, 311, 312, 313, 0, 0, 0, 0, 0, 296,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 339, 0, 295, 0, 0, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 337, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 341, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 338, 334, 335, 332,
	333, 331, 330, 329, 340, 319, 320, 321, 322, 324,
	0, 132, 234, 235, 323, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 178, 137,
	232, 233, 326, 140, 327, 0, 186, 150, 0, 336,
	111, 0, 317, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 1204, 0, 0, 281, 305, 283, 303, 307,
	308, 309, 310, 0, 0, 112, 306, 311, 312, 313,
	0, 0, 0, 0, 0, 296, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 339, 0, 295,
	0, 0, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 337, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 341, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 338, 334, 335, 332, 333, 331, 330, 329,
	340, 319, 320, 321, 322, 324, 0, 132, 234, 235,
	323, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 178, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 336, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1535, 0,
	0, 281, 0, 1307, 1308, 1309, 1310, 0, 0, 0,
	0, 112, 1313, 1311, 312, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 1315, 1320, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 0, 1319,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	178, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 281, 0, 1307,
	1308, 1309, 1310, 0, 0, 0, 0, 112, 1313, 1311,
	312, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 1315, 1320, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 1317, 0, 1319, 1318, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 0, 369, 305, 923, 303, 307, 308, 309,
	310, 0, 0, 112, 306, 311, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 764, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 1821, 0,
	369, 0, 1819, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 1818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 765, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 0, 791, 792, 167, 793, 794, 795, 797,
	796, 766, 767, 768, 772, 770, 769, 771, 743, 745,
	211, 741, 744, 750, 746, 747, 748, 762, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 763,
	773, 774, 775, 776, 777, 778, 779, 780, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 764, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 369, 98, 742, 139, 0,
	220, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 765, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 2009, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 0, 791, 792,
	167, 793, 794, 795, 797, 796, 766, 767, 768, 772,
	770, 769, 771, 743, 745, 211, 741, 744, 750, 746,
	747, 748, 762, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 763, 773, 774, 775, 776, 777,
	778, 779, 780, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 576, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 742, 139, 369, 220, 578, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 573, 572, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 764, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 369,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 0, 791, 792, 167, 793, 794, 795, 797, 796,
	766, 767, 768, 772, 770, 769, 771, 743, 745, 211,
	741, 744, 750, 746, 747, 748, 762, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 763, 773,
	774, 775, 776, 777, 778, 779, 780, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 132, 234, 235, 0, 98, 742, 139, 0, 220,
	0, 171, 125, 207, 1821, 0, 369, 0, 1819, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 1818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 369, 220, 502, 171, 125,
	207, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 146, 213, 0,
	0, 0, 1048, 0, 1047, 0, 1049, 1050, 0, 138,
	0, 0, 1051, 1054, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 132, 234, 235,
	0, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	50, 0, 0, 94, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 112, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 94, 220, 96, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 281, 220, 96, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 2089, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 1510,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 132, 234, 235, 0, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 50, 0, 0, 94,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 112,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 706, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 94, 220,
	708, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	132, 234, 235, 0, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 50, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 94, 220, 96, 171, 125,
	207, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 823, 177, 114, 205, 183, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 800, 0, 132, 234, 235,
	369, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 801, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 727,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 369,
	220, 726, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 706, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 94, 220,
	708, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 704, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 684, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 94, 220, 96,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 94, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 94, 220, 96, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 96, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 369, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 1510, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	369, 98, 106, 139, 0, 220, 0, 171, 125, 207,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 1636, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 281,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 94, 220,
	708, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 369, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 369, 220, 578, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 369, 220, 502, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 369, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 234,
	235, 0, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111,
}

var yyPact = [...]int16{
	2852, -1000, -249, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1452, 1517, -1000, -1000, -1000, -1000, -1000, 1239, 2216,
	324, 391, 177, 18042, 388, 2676, 18331, -1000, 132, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1141, -1000, -1000,
	-1000, -1000, -1000, 1442, 1449, 1141, 1428, 9182, -1000, 323,
	15430, 17753, 7440, -1000, 20342, 361, 359, 218, 337, 20627,
	314, 314, 20627, 20627, 18331, 375, 314, -1000, -191, -155,
	-1000, -47, 369, 18331, -1000, 18331, 320, 997, 320, 320,
	320, 18331, -1000, 491, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18331, 976, 1368, 283,
	5936, 5936, 5936, 5936, 206, 5936, 22, 1265, -1000, -1000,
	-1000, -1000, 5936, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1326, 881, 1376, 10202, 10202, 1452, -1000,
	1141, -1000, -1000, 1474, -1000, 13385, 488, -1000, 10202, 52,
	1142, -1000, -1000, -208, 1142, -1000, -1000, 407, -1000, -1000,
	-1000, 11210, 11210, 11210, 11210, 11210, 11210, 11210, -1000, -1000,
	-1000, -1000, 54, -1000, 867, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 484, -1000, 9866, 1142, 1142, 1142,
	1142, 1142, 1142, 1142, 1142, 10202, 1142, 1314, 1142, 1142,
	1142, 1142, 1142, 1142, 1142, 1142, 2303, 1142, 1142, 1142,
	1142, -1000, 672, 17458, 1127, 1290, -1000, -1000, -1000, 1420,
	14554, 17169, 18331, 1115, -1000, 1177, 7064, 7, -1000, -1000,
	-1000, 619, 481, 16880, -1000, -1000, -1000, 1349, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1040,
	-1000, 13670, 13670, 16591, 20627, 314, 336, 143, 314, 1242,
	970, 658, 963, 1264, 417, 1419, 314, 18331, -1000, -1000,
	-1000, -1000, 16306, 5936, 331, 18331, 1394, 1263, 18331, 959,
	957, -1000, 6688, -1000, 5936, 5936, 5936, 5936, 5936, 5936,
	5936, 5936, -1000, -1000, -1000, -1000, -1000, -1000, 5936, 5936,
	-1000, 31, -1000, 18331, -1000, 1424, -1000, -1000, -1000, -1000,
	-1000, 1499, 527, 877, 465, 1178, -1000, 843, 1442, 881,
	18331, -1000, 10202, 10202, 819, -1000, 20053, -1000, -1000, 4432,
	538, 11210, 796, 582, 11210, 11210, 11210, 11210, 11210, 11210,
	11210, 11210, 11210, 11210, 11210, 11210, 11210, 11210, 11210, 844,
	2607, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 935, -1000, 3587, -1000, 1141, 12514, 12514,
	55, 55, 55, 55, 55, 55, 19764, -1000, -258, 8510,
	-1000, 7816, 881, 1028, 703, 9866, 9182, 9182, 9518, 10202,
	11210, 19190, 9182, 1424, 647, 703, 19190, 1439, -1000, 881,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 86,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9182, 9182,
	9182, 9182, -1000, 257, 18331, -1000, 19190, 15430, 15430, 15430,
	15430, 15430, -1000, 1301, 1287, -1000, 1298, 1277, 1313, 18331,
	-1000, 1035, 14554, 575, 1142, -1000, 19479, -1000, -1000, 257,
	1091, 15430, 18331, -1000, -1000, 6312, 1177, 7, 1170, -1000,
	9, 2, 8174, 7816, 518, -1000, -1000, -1000, -1000, 229,
	14256, 136, -144, 44, -1000, -1000, -1000, -1000, -1000, 1213,
	-1000, -1000, -1000, 1213, 273, 1238, 1213, 1238, -1000, 1213,
	1238, 83, 83, 83, 83, 83, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1237, 1236, -1000, 1213, 1213, 1213, 1213,
	1213, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1224, 276, 1224, 1214, 1214, -1000, -1000, 136, 1235,
	18331, 20627, 1261, 18331, 314, -177, 18331, -77, 925, 5936,
	1387, 5936, 18331, 1479, 18331, -1000, -1000, -1000, 164, 13670,
	18331, -1000, 2371, 18331, -1000, 18331, -1000, -1000, 18331, 5936,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 614, -1000, -1000, -1000, 1279,
	-1000, -1000, 1316, 10202, 10202, 5184, 10202, -1000, -1000, -1000,
	1376, -1000, -1000, 538, 591, -1000, -1000, 804, -1000, -1000,
	-1000, -1000, 464, 1142, -1000, 2195, -1000, -1000, -1000, -1000,
	796, 11210, 11210, 11210, 1282, 2195, 2128, 1814, 806, 55,
	74, 74, 87, 87, 87, 87, 87, 151, 151, -1000,
	-1000, -1000, -1000, -71, -1000, 1213, 1224, 276, 1224, 1214,
	1214, -1000, -1000, 881, 272, 198, -1000, -1000, 83, -1000,
	-1000, -144, -1000, -208, 866, -1000, -1000, 827, 881, 9182,
	1023, 1028, -1000, 13385, -1000, -1000, 10202, -1000, 881, 1023,
	1023, 794, 1175, 11546, 1213, -1000, 1213, 1214, -1000, -1000,
	1213, 122, 1213, 116, -1000, -1000, -1000, -1000, 1214, -1000,
	-1000, -1000, -1000, -1000, 1213, 1213, -1000, -1000, 1213, -1000,
	1213, 1213, 621, 710, 1877, 1160, -1000, 458, 1023, 9182,
	655, -1000, 10202, 881, 18331, -1000, -1000, 1023, 881, 1171,
	1023, 1023, 1058, 1142, -1000, 1155, -1000, 616, 1290, 1232,
	1257, 1554, -1000, -1000, -1000, -1000, 1286, -1000, 1247, -1000,
	-1000, -1000, -1000, -72, 358, 342, 340, 20627, -1000, 1460,
	15430, 1143, -1000, -1000, 1170, 7, 12, -1000, -1000, -1000,
	-1000, 703, 610, -1000, -1000, 922, 7816, 1162, 1330, -1000,
	-1000, -1000, -1000, -1000, -1000, 1228, 709, 20627, 294, 295,
	505, 360, 920, -1000, -1000, -1000, 747, -1000, 20627, -1000,
	1498, -1000, -1000, 293, -1000, 291, 654, 865, 18331, 211,
	1226, 12218, 823, -1000, -261, -1000, 41, -1000, -1000, 810,
	83, 83, 1213, 83, 837, 83, 83, -1000, -1000, 518,
	1335, 518, 518, 518, 518, 845, 845, -79, -79, -1000,
	-1000, -1000, -1000, 822, 1224, -1000, -1000, -1000, 816, -1000,
	18331, 20627, 1223, 1256, 18331, 1412, 18331, -1000, -1000, -1000,
	1410, -1000, 7816, -1000, -1000, -1000, -1000, -1000, 1406, 1121,
	-1000, -1000, -1000, -1000, 420, -1000, -1000, 1246, -1000, 1284,
	1653, 499, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 239, 397, -1000, 5936, -1000, 633, 18331,
	18331, 9182, -1000, 1310, 703, 703, 450, -1000, -1000, -1000,
	-1000, -1000, 5560, 9182, -1000, 1282, 2195, 433, -1000, 11210,
	11210, 101, -1000, 1213, -1000, 100, 97, -1000, 70, -1000,
	-208, -1000, 1023, 9182, -246, -1000, 703, -1000, -1000, -1000,
	3111, 844, 10202, -1000, 810, 264, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3111, 11210,
	11210, 11210, 11210, 11210, 5184, -65, 1150, 640, -1000, 10202,
	618, -1000, -1000, -1000, -1000, -1000, -1000, 1255, 19190, 1142,
	-1000, 16017, 20627, 1452, 19190, 10202, 10202, -1000, -1000, 10202,
	1222, -1000, 10202, -1000, -1000, -1000, -1000, 1221, 1142, 1142,
	1142, 1001, -1000, 1452, 1143, -1000, -1000, -1000, -5, -11,
	-1000, 10202, -1000, 4808, -1000, 229, -1000, 18616, -1000, 1492,
	1437, 286, 33, -1000, 910, 897, -1000, 886, -1000, -1000,
	57, -1000, -164, 105, 18, -1000, -1000, 1142, -1000, 1220,
	1405, -1000, 1374, 802, -1000, 11882, -1000, -234, -1000, -1000,
	-1000, -208, -1000, -1000, -1000, 1142, -1000, 1219, 1218, -1000,
	1212, 1142, 447, -1000, -1000, -1000, -1000, -1000, 1084, 518,
	518, 83, 518, 1083, 1074, 518, 518, -1000, 556, -1000,
	-1000, -1000, -1000, 1020, -1000, 1017, -1000, -1000, 1154, -1000,
	1009, 1159, 1254, 15132, 18331, 1215, 1141, 1396, 1141, 1153,
	-1000, 607, 1436, 196, 18331, 1479, 1479, 20627, -1000, 288,
	20627, -1000, -1000, 20627, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 20627, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18331, -1000, -1000, -1000, -1000,
	-1000, 20627, 289, -1000, -1000, 841, 10202, -1000, -1000, 1120,
	-1000, 7816, -1000, -1000, 881, -1000, 11210, 2195, 2195, 39,
	37, 36, -1000, 827, -1000, -1000, -1000, -1000, 1142, 881,
	1213, 1213, -1000, 1213, 1214, -1000, 1213, 122, 1213, 116,
	-1000, -1000, -1000, -1000, 1214, -1000, -1000, -1000, -1000, -1000,
	1213, 1213, -1000, -1000, 1213, -1000, 1213, 1213, 881, 677,
	-1000, -1000, 881, 296, 998, 140, 277, 372, -1000, 1142,
	-55, -1000, 703, 10202, -1000, 1377, 1079, 1138, -1000, -1000,
	8846, 881, 1004, 444, 1001, 1442, -1000, 703, 703, 703,
	18901, 703, -180, 18901, 18901, 18901, 15719, 20627, 1442, -1000,
	-1000, -1000, -1000, 703, 4056, -1000, 7816, 996, -1000, 281,
	1213, 345, 345, -188, 285, 282, 1142, -1000, -1000, -1000,
	-1000, -158, -1000, -1000, -1000, -1000, 654, -1000, 1212, 10202,
	18901, 150, -1000, 1152, 1072, 2802, 1069, -1000, 3587, -1000,
	881, -1000, 836, -1000, 769, 1066, 7816, -1000, -1000, -1000,
	518, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 83, 811,
	83, 795, -1000, 785, 15132, 20627, 18331, 1062, 1151, -1000,
	280, 1211, 18901, -1000, 1141, -1000, 7816, 4056, 327, 1470,
	-1000, -1000, 1434, -1000, 1096, 1209, 20627, -1000, -1000, 284,
	-1000, 1208, -1000, -1000, -1000, -1000, 1382, 20627, -1000, -1000,
	703, 1460, 15430, -1000, 2195, -1000, -1000, -1000, -1000, 405,
	-1000, -1000, -1000, -1000, -1000, 11210, 11210, -1000, 11210, 11210,
	11210, 881, 749, 703, 279, -1000, 1142, -1000, -1000, 1137,
	20627, 20627, -1000, -1000, 990, -1000, -1000, 988, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 974, 974, 974, 575, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, 18616, 1390, -1000, -1000,
	-1000, 698, -1000, -1000, 662, 199, 696, -1000, 20627, -158,
	10202, -1000, 1142, 677, 955, 10202, 1204, 783, -1000, 1054,
	-234, 1142, -1000, -1000, -1000, -1000, -1000, -1000, 1142, -1000,
	518, -1000, 518, 1032, 1013, 1010, 1199, 1198, -198, 15132,
	953, -1000, -1000, -1000, 20627, -1000, -1000, -1000, -1000, -1000,
	181, 2659, -1000, 13967, 1196, 1195, 18901, 1142, 310, 1457,
	1145, -1000, 951, 881, 1447, 296, 296, 296, 296, 114,
	-1000, -1000, 1496, -1000, 1142, -1000, 1141, 432, -1000, 20627,
	-1000, -1000, -180, -1000, -1000, -1000, -72, 1249, 809, 182,
	-1000, 876, 588, 711, 577, 574, 571, 568, 564, 563,
	562, -1000, -1000, -1000, 1495, -1000, -1000, -1000, 1488, 1193,
	-1000, 1192, 677, 10202, 201, 1251, 864, -1000, 991, 975,
	-1000, -1000, -1000, -1000, -198, 15132, 18616, 1460, 1182, 956,
	1460, 1068, -1000, 179, 2659, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1452, 20627, 2730, 20627, 20627,
	20627, 427, 10874, 10202, -1000, 945, 12811, 13967, 13967, 12811,
	13967, 13967, 18616, 18616, 944, 220, 270, 1455, 1446, -1000,
	881, -1000, 10202, -1000, -1000, -1000, -1000, 881, 233, -116,
	19190, 1138, 881, 20627, -1000, -1000, -1000, -1000, 20627, -1000,
	-114, 809, 20627, -1000, 770, -1000, -1000, 745, 742, 745,
	745, 745, 745, 745, 345, 345, 20627, 18616, 201, 677,
	-1000, -60, 1484, -124, 880, -1000, -1000, 1460, 906, 942,
	378, 18901, -198, 378, -75, 20627, 10202, 2595, -1000, 1442,
	1126, 13096, -1000, 754, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20627,
	1472, 1471, 1464, 1462, 2558, 52, 590, 141, -1000, -1000,
	12811, -1000, -1000, -1000, -1000, -1000, 940, 916, 1242, 914,
	-1000, 20627, 1181, -1000, 10202, 10202, -1000, 1102, -1000, 703,
	-1000, 1308, -69, -119, 1097, -1000, -1000, 1142, 905, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 654, 654, 903, 901, -1000, 201, -1000, 345, 345,
	-1000, -1000, -1000, 202, 790, 721, 718, 712, 32, -1000,
	1445, 378, 1460, 378, 1249, 891, 1460, 1249, -1000, -244,
	-1000, 703, -1000, -1000, 2659, 1376, 20627, 175, -1000, -1000,
	-1000, 2730, 1379, -1000, -1000, -1000, -1000, -1000, 2659, 2659,
	2659, -1000, 287, -77, -1000, 220, 1325, 18616, 703, 868,
	10202, -1000, 1305, -1000, 20627, -1000, 809, -1000, -1000, 304,
	378, -1000, -1000, -1000, 705, -1000, 702, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14843, 1249, 378, -1000, -1000, -1000,
	378, -1000, 10202, -256, -1000, -1000, 13670, 1433, -1000, 20627,
	2367, -1000, 167, 1392, 149, -1000, 157, -1000, -1000, 235,
	885, -1000, -108, 881, -1000, 18331, 1249, -1000, -1000, -1000,
	412, -1000, -1000, 1249, 703, 639, 1141, -1000, -1000, -1000,
	635, 622, -1000, 159, -1000, 214, -1000, -117, -1000, 1180,
	-1000, 7816, -1000, -1000, -1000, 313, 135, -1000, -1000, 1142,
	-120, 20627, -1000, -1000, 2659, 10538, -1000, 874, 1319, 296,
	881, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1785, 15, 3, 1784, 1782, 1781, 1534, 1528, 1525,
	1523, 1777, 1772, 1770, 1768, 1767, 1766, 1761, 1758, 1757,
	1756, 1755, 1753, 1751, 1750, 1749, 1748, 1743, 1739, 1737,
	1413, 1734, 1733, 1732, 112, 1731, 1729, 1728, 1725, 85,
	104, 89, 79, 1830, 1724, 52, 129, 108, 1723, 93,
	1720, 1719, 228, 1718, 110, 1717, 1716, 375, 1714, 1713,
	49, 35, 23, 56, 1709, 1708, 111, 1371, 1707, 1704,
	73, 1703, 1702, 97, 25, 44, 43, 50, 1701, 70,
	17, 1697, 95, 1695, 1694, 1693, 1692, 69, 1690, 98,
	27, 47, 13, 1689, 18, 19, 106, 77, 55, 20,
	213, 105, 1688, 78, 109, 90, 1687, 933, 1686, 1681,
	1680, 1678, 1674, 1672, 771, 102, 1662, 1660, 1657, 91,
	0, 502, 33, 122, 1656, 1654, 1652, 2090, 128, 107,
	54, 1651, 74, 253, 83, 1650, 1649, 80, 121, 2,
	115, 114, 1648, 116, 1647, 1644, 1642, 1706, 99, 72,
	82, 45, 1640, 1639, 101, 88, 87, 71, 94, 103,
	22, 1636, 1635, 1634, 65, 1633, 31, 30, 1, 100,
	1632, 1631, 1628, 1627, 51, 68, 1626, 48, 1624, 42,
	24, 8, 46, 5, 1623, 1622, 1618, 9, 1615, 53,
	1613, 12, 1612, 38, 1606, 1597, 1595, 40, 1594, 1589,
	1587, 39, 1586, 1585, 41, 29, 76, 57, 67, 1581,
	1579, 21, 81, 66, 1578, 64, 7, 4, 10, 1576,
	11, 1575, 1573, 1572, 28, 26, 1571, 1570, 1569, 1568,
	1566, 1564, 60, 1562, 1560, 1559, 1558, 1557, 6, 1555,
	1554, 14, 1553, 1552, 1548, 1943, 36, 1547, 1545, 32,
	1543, 1542, 1536, 1531, 509,
}

var yyR1 = [...]uint8{
	0, 243, 244, 244, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 247, 247,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	221, 221, 220, 222, 222, 12, 12, 12, 12, 12,
	214, 214, 214, 214, 214, 13, 13, 217, 217, 14,
	14, 14, 101, 101, 105, 105, 105, 106, 106, 106,
	106, 234, 234, 233, 233, 135, 135, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 248, 248, 249, 249, 249,
	249, 249, 249, 249, 212, 212, 212, 212, 213, 213,
	213, 215, 215, 216, 216, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 219, 219, 195, 195, 195,
	196, 196, 196, 196, 196, 196, 198, 198, 199, 199,
	125, 125, 193, 193, 192, 191, 191, 190, 190, 189,
	200, 200, 22, 171, 172, 172, 172, 172, 172, 172,
	172, 159, 159, 139, 139, 139, 139, 139, 139, 139,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 206, 206, 206, 206,
	206, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 208, 209, 210, 202, 202, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	149, 149, 149, 149, 149, 149, 201, 201, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 143, 143, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 142,
	142, 142, 142, 142, 142, 142, 142, 144, 144, 144,
	144, 144, 144, 144, 144, 140, 140, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 158, 158,
	147, 147, 156, 156, 157, 157, 157, 148, 148, 148,
	155, 155, 155, 152, 152, 153, 153, 154, 154, 154,
	150, 150, 150, 151, 151, 151, 161, 182, 182, 182,
	184, 184, 185, 185, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 170, 170, 211, 211, 181,
	181, 181, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 169, 169, 179, 179, 180, 180, 177, 177, 177,
	178, 164, 164, 164, 164, 164, 165, 166, 166, 166,
	166, 162, 163, 204, 204, 204, 239, 239, 239, 239,
	239, 239, 240, 240, 205, 205, 167, 167, 168, 168,
	175, 175, 175, 175, 250, 250, 173, 173, 174, 174,
	174, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 251, 251, 252, 252,
	252, 252, 252, 252, 252, 188, 186, 186, 187, 187,
	17, 18, 18, 18, 18, 18, 19, 19, 23, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 112, 112, 109, 109, 110, 110, 111, 111,
	111, 113, 113, 113, 136, 136, 136, 25, 25, 27,
	27, 28, 29, 26, 26, 26, 26, 26, 253, 30,
	31, 31, 32, 32, 32, 36, 36, 36, 34, 34,
	35, 35, 41, 41, 40, 40, 42, 42, 42, 42,
	124, 124, 124, 123, 123, 235, 235, 235, 235, 235,
	44, 44, 45, 45, 46, 46, 47, 47, 47, 224,
	224, 223, 223, 225, 225, 225, 225, 225, 225, 59,
	59, 94, 94, 94, 97, 97, 48, 48, 48, 48,
	49, 49, 50, 50, 51, 51, 131, 131, 130, 130,
	130, 129, 129, 53, 53, 53, 55, 54, 54, 54,
	54, 56, 56, 58, 58, 57, 57, 60, 60, 60,
	60, 61, 61, 95, 95, 43, 43, 43, 43, 43,
	43, 43, 108, 108, 63, 63, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 72, 72, 72, 72,
	72, 72, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 39, 39, 73, 73, 73, 79, 74,
	74, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 70, 70,
	70, 70, 70, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 254,
	254, 71, 71, 71, 71, 37, 37, 37, 37, 37,
	134, 134, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 83, 83, 38, 38, 81, 81, 82,
	84, 84, 80, 80, 80, 226, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 85, 85, 86,
	86, 236, 236, 237, 237, 238, 87, 87, 88, 88,
	89, 90, 90, 90, 91, 91, 91, 91, 92, 92,
	92, 65, 65, 65, 65, 65, 65, 93, 93, 93,
	93, 98, 98, 75, 75, 77, 77, 76, 78, 99,
	99, 103, 100, 100, 104, 104, 104, 104, 104, 20,
	21, 102, 102, 102, 126, 126, 126, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 121, 121,
	122, 122, 127, 127, 127, 128, 128, 227, 227, 227,
	228, 228, 228, 229, 229, 230, 231, 231, 232, 242,
	242, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 245,
	246, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 7,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 0, 3, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 7, 8, 7, 5, 5, 5,
	11, 11, 9, 5, 8, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	0, 2, 4, 4, 0, 1, 3, 3, 3, 3,
	3, 2, 2, 3, 1, 1, 1, 1, 1, 0,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	8, 8, 5, 8, 7, 4, 2, 4, 6, 2,
	4, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 2, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 1, 1, 3, 3,
	2, 2, 2, 1, 1, 1, 1, 4, 4, 4,
	4, 4, 1, 5, 2, 2, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 0,
	2, 5, 2, 3, 3, 2, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 1, 1, 2,
	2, 10, 7, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 6, 11, 13, 13, 6, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 3, 4, 4, 5,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 0,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 6, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 2, 4, 5,
	5, 6, 4, 4, 4, 6, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 3, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 0, 3, 1, 3, 1, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -243, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -245, 8, 334,
	56, -244, 382, -87, 15, -32, 5, -30, -253, -30,
	-30, -30, -30, -171, 56, -239, -240, -200, 131, 164,
	326, 128, 144, 162, 163, 354, 129, 366, 367, 146,
	369, 76, -107, 132, 134, 129, 129, 130, 132, 326,
	128, 129, -57, -127, 59, -120, 61, 171, 345, 21,
	206, 219, 220, 211, 252, 240, 346, 169, 237, 241,
	291, 380, 69, 209, 300, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 352, 225, 141, 259, 263,
	270, 292, 341, 216, 217, 294, 256, 33, 143, 347,
	37, 159, 295, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 290, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 351, 296, 222, 158, 173, 153, 299, 368, 168,
	210, 293, 218, 302, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 301, 277, 353, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 284, 285, 286,
	349, 297, 233, 278, 279, 177, 178, 179, 180, 181,
	182, 183, 34, 35, 342, 343, 129, 116, 241, 122,
	281, 130, 33, 161, -136, 129, -109, 165, 283, 284,
	285, 286, 59, 293, 292, 287, -127, 208, -132, -132,
	-132, -132, -132, -30, -2, -91, 17, 16, -5, -3,
	-245, 21, 22, -42, 107, -43, -127, -62, 78, -67,
	29, 59, -120, 61, 24, -66, -63, -80, -226, -78,
	-79, 116, 117, 105, 106, 113, 79, 118, -70, -68,
	-69, -71, -229, 62, -121, 60, 70, 63, 64, 65,
	66, 71, 72, 73, 303, -76, -245, 46, 47, 335,
	336, 337, 338, 344, 339, 81, 36, 38, 325, 333,
	332, 331, 329, 330, 327, 328, 379, 135, 326, 111,
	334, 267, -31, -107, -45, -46, -47, -48, -59, -79,
	-245, -57, 11, -52, -57, -100, -135, 208, -104, 293,
	292, -122, 303, -102, -121, -119, 291, 241, 290, 59,
	-120, 127, 185, 357, 77, 23, 25, 274, 280, 184,
	80, 116, 16, 81, 191, 366, 367, 115, 335, 122,
	50, 327, 328, 325, 189, 337, 338, 326, 281, 196,
	20, 29, 377, 10, 26, 149, 22, 109, 124, 186,
	84, 85, 152, 24, 150, 73, 192, 194, 19, 53,
	142, 11, 356, 13, 14, 371, 358, 135, 134, 96,
	370, 130, 48, 8, 118, 27, 378, 93, 44, 147,
	195, 46, 94, 17, 329, 330, 32, 344, 156, 111,
	51, 38, 372, 78, 373, 71, 54, 298, 190, 76,
	15, 49, 157, 374, 144, 193, 95, 125, 334, 47,
	187, 375, 128, 188, 6, 340, 31, 148, 45, 129,
	282, 83, 133, 72, 163, 5, 146, 9, 52, 55,
	331, 332, 333, 36, 82, 12, 145, 348, 74, -172,
	-159, -121, 61, 130, 130, 132, -234, 204, 132, -121,
	-115, 135, -115, -121, -121, -57, 129, -115, 369, 366,
	367, 334, 129, -57, -57, -114, 135, 59, -114, -114,
	-114, -57, 119, -57, 59, 31, 326, 59, 161, 129,
	162, 132, -133, -245, -122, -133, -133, -133, 166, 167,
	-133, -110, 288, 54, -133, -36, 42, 43, -246, 58,
	-92, 19, 32, -43, -127, -88, -89, -43, -87, -2,
	11, -124, 77, 76, 93, -123, 23, -121, 61, 119,
	-43, -64, 96, 78, 94, 95, 80, 102, 101, 112,
	105, 106, 107, 108, 109, 110, 111, 103, 104, 115,
	379, 86, 87, 88, 89, 90, 91, 92, 97, 98,
	99, 100, -108, -245, -197, 379, -79, -245, 120, 121,
	-67, -67, -67, -67, -67, -67, -67, -230, 268, -245,
	61, 119, -2, -74, -43, -245, -245, -245, -245, -245,
	-245, -245, -245, -245, -83, -43, -245, 39, -254, -245,
	-254, -254, -254, -254, -254, -254, -254, -138, 116, 241,
	151, 232, -141, -140, 247, 246, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 240, 346, -245, -245,
	-245, -245, 68, -58, 27, -57, 31, 57, -53, -55,
	-54, -56, 44, 48, 50, 45, 46, 47, 51, -131,
	23, -45, -245, -130, 157, -129, 23, -127, 61, -57,
	-52, -247, 57, 11, 55, 57, -100, 208, -101, -105,
	294, 296, 86, 119, -126, -121, 61, 29, 31, 58,
	57, -160, -139, -143, -140, -145, -144, -146, -121, -141,
	-142, 240, 346, 237, 241, 238, 243, 244, 245, 116,
	242, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 246, 258, 31, 151, 230, 231, 232, 235,
	234, 236, 233, 259, 260, 261, 262, 263, 264, 265,
	266, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 225, 226, 227, 229, 228, -160, -121,
	54, 203, -121, -115, 132, 205, -115, -193, 55, 59,
	78, 59, 54, -212, 54, 19, 184, 185, 197, 23,
	-115, -57, -57, 298, -133, 133, -57, 24, 54, -57,
	59, 59, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 282, 289, -57, -34,
	22, 9, 96, 57, 18, 119, 57, -90, 25, 26,
	-91, -246, -57, -43, -43, -72, 71, 78, 72, 73,
	-123, 107, -128, -122, -119, -67, -73, -76, -79, 67,
	96, 94, 95, 80, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -134,
	59, 61, -143, 231, -138, -141, 222, 223, 225, 226,
	227, 229, 228, 59, 241, 231, 271, 118, 247, 256,
	257, -139, -66, 61, -121, -66, -121, 383, -41, 22,
	-40, -74, -42, -43, -122, -246, 57, -246, -2, -40,
	-40, -43, -137, 116, 237, 151, 232, 226, 256, 257,
	243, 276, 230, 277, 219, 211, 216, 229, 227, 213,
	228, 212, 225, 222, 235, 234, 236, 247, 238, 245,
	244, 242, -43, -80, -67, -80, -121, -127, -40, -34,
	-81, -82, 82, -80, 19, -246, 239, -40, -41, -40,
	-40, -40, -96, 157, -57, -99, -103, -80, -46, -47,
	-47, -46, -47, 44, 44, 44, 49, 44, 49, 44,
	-54, -127, -246, -60, 52, 134, 53, -245, -129, -96,
	55, -45, -57, -104, -101, 57, 295, 297, 298, 54,
	74, -43, -122, -151, 116, 115, -175, -250, 349, 35,
	-159, -161, -164, -162, -163, -176, -165, 138, 136, 140,
	141, 146, -169, 130, 147, 71, 78, -206, 138, -209,
	54, 274, 280, 136, 147, 146, 380, 69, 139, 356,
	358, 29, 30, -154, 383, 268, -152, 277, -147, 56,
	-147, -147, 239, -148, 56, -147, -148, -147, -148, -150,
	241, -150, -150, -150, -150, 56, 56, -147, -147, -147,
	-147, -147, -156, 56, 224, -156, -156, -157, 56, -157,
	54, 55, -57, -121, 54, -57, -115, -233, 377, 378,
	-57, -191, 348, -192, 59, -133, 24, -133, -57, -215,
	-213, 8, 9, 10, -57, 198, -139, -57, -116, 127,
	124, 125, -188, 123, 274, 241, 69, 29, 15, 335,
	157, 353, 59, 158, -57, -57, -57, -133, -111, 11,
	96, -35, 45, 40, -43, -43, -128, -89, -92, 71,
	72, 73, 119, -245, -73, -67, -67, -67, -39, 152,
	77, 348, -246, 239, -155, 348, 349, -154, -231, -232,
	61, -246, -40, 57, -246, -246, -43, -246, -246, -246,
	57, 55, 57, -147, 56, -147, -147, -157, -147, 217,
	-147, 217, -157, -147, -147, -147, -147, -147, 23, 57,
	11, 57, 57, 11, 119, -246, -40, -84, -82, 84,
	-43, -246, -127, -246, -246, -246, -246, -65, 31, 36,
	-2, -245, -245, -61, 57, 12, 86, -50, -49, 54,
	55, -51, 54, -49, 44, 44, -224, 348, 130, 130,
	130, -97, -121, -61, -45, -61, -105, -106, 299, 296,
	302, 86, 59, -173, -122, 57, 34, 56, -205, 54,
	78, -167, -121, 147, -169, -169, 59, -169, 59, 130,
	59, 71, 19, -121, 9, 147, 147, -205, 61, -57,
	-202, 357, 16, 56, -207, 56, -208, 61, 62, 63,
	64, 71, -149, 70, -63, 269, -70, 325, 328, 327,
	270, -121, -127, -210, 63, 384, -153, 278, 63, -150,
	-150, -147, -150, 63, 59, -150, -150, -151, 31, -151,
	-151, -151, -151, -158, 61, -158, -155, -155, 63, -156,
	63, -57, -121, 56, 54, -57, 23, -57, 23, -190,
	-189, -122, -195, 23, 54, 57, -212, 55, -132, -125,
	138, -164, -252, 164, 146, 137, 142, 141, 59, 136,
	140, 157, -194, 164, 137, 138, 142, 141, 59, 130,
	147, 136, 140, 157, 146, -117, -118, 133, 23, 130,
	147, 157, 127, -133, -113, 94, 12, -127, -127, -40,
	41, 119, 107, -122, -41, -39, 77, -67, -67, 230,
	230, 230, 384, 57, -197, -246, -42, -235, 381, -137,
	116, 237, 151, 232, 226, 256, 243, 276, 230, 277,
	219, 211, 216, 229, 227, 213, 228, 212, 225, 222,
	235, 234, 236, 247, 238, 245, 244, 242, -134, -43,
	-150, 59, -137, -67, -67, -67, -67, -67, -122, 345,
	-87, 85, -43, 83, -98, 54, -99, -75, -77, -76,
	-245, -2, -93, -121, -97, -87, -103, -43, -43, -43,
	56, -43, 56, -245, -245, -245, -246, 57, -87, -61,
	296, 300, 301, -43, 86, -122, -175, -180, -177, -121,
	147, 10, 9, 19, 142, 136, 380, 59, 59, 59,
	-204, 146, 366, 367, 368, -206, 380, -149, 270, -245,
	56, 23, 29, 63, -207, 56, -208, -197, 379, -197,
	-245, -147, 56, -147, 56, 56, 119, 58, -151, -151,
	-150, -151, 58, 58, -151, -151, 59, 116, 58, 57,
	58, 57, 58, 57, 56, 55, 54, -179, -180, -70,
	-121, -57, 56, -2, 23, -2, 57, 86, -196, 19,
	172, 173, -57, -213, -215, -121, -251, 130, 147, -121,
	-132, -121, -132, -121, -57, -132, -121, 138, -164, 61,
	-43, -44, 11, -246, -67, 279, 279, 279, -232, -245,
	-246, -246, -246, -246, -246, 19, 57, -246, 57, 19,
	-245, -38, 340, -43, 28, -98, 57, -246, -246, -246,
	57, 119, -246, -91, -94, -121, 147, -223, -225, 371,
	372, 373, 374, 375, 376, -94, -94, -94, -130, -121,
	-91, -174, -122, 61, 63, 58, 57, -147, -178, 272,
	-147, -166, 168, 169, 31, 170, -166, 368, 147, 147,
	-245, -204, -205, -43, -94, 56, 358, 57, 58, -207,
	61, 269, 58, -121, -246, 58, 58, 58, -122, -151,
	-150, 61, -150, 63, 63, -179, -121, -57, 58, 56,
	-94, -2, -189, -174, 133, 21, 6, 8, 9, 10,
	19, 23, -248, 56, -121, 146, 56, 27, -121, -61,
	-45, -246, -236, -87, 157, -67, -67, -67, -67, -67,
	-246, 61, 147, -77, 36, -2, -245, -121, -121, 57,
	58, 58, 57, -246, -246, -246, -60, -182, -184, 348,
	-183, 55, 143, 69, 177, 178, 179, 180, 181, 182,
	183, -177, -90, -205, 54, 71, 171, -205, 54, -167,
	-121, -204, -43, -245, -246, 58, -43, 56, 63, 58,
	-151, -151, 58, 58, 58, 56, 56, -95, 370, -179,
	58, -168, -121, 186, -216, -218, -7, -9, -8, -11,
	-10, -12, -13, -14, -20, -3, 20, 31, 190, 191,
	196, 192, 145, 135, -21, -249, -121, 105, 86, 61,
	-159, 57, 56, 56, -94, -245, 136, -85, 13, -246,
	-87, -246, 16, -246, -246, -246, -246, -37, 96, 348,
	9, -75, -2, 119, -121, -225, -224, -181, 54, -183,
	348, 56, 350, 59, -170, 86, 61, 86, 86, 86,
	86, 86, 86, 86, 9, 10, 56, 56, -246, -43,
	-201, 170, 54, 58, -203, 58, 58, -95, -179, -180,
	-61, 56, 58, -61, -198, 57, 55, 187, -218, -87,
	-221, -121, -220, -242, -241, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, -121, -121, -121, -214,
	38, 193, 194, 195, -62, -67, -43, -62, 58, -249,
	-121, -249, -249, -249, -249, -249, -180, -180, 58, -186,
	-187, 157, 147, -86, 14, 16, -246, -237, -238, -43,
	-246, 346, 51, 351, -99, -246, -121, -121, -185, -183,
	-121, 63, -211, 54, 74, 63, -211, -211, -211, -211,
	-211, -166, -166, -168, -180, -201, -246, 341, 10, 9,
	354, 355, 58, 207, 360, 361, 156, 362, 170, 363,
	364, -61, 58, 58, -182, -94, -95, -182, -199, 348,
	-121, -43, -219, -218, 206, -91, 57, -222, -139, 188,
	-211, 57, -121, 11, 11, 11, 11, -218, 206, 83,
	206, 58, 58, -193, -246, 57, -121, 56, -43, -74,
	57, 41, 347, 352, -245, 58, 57, -205, -205, 58,
	58, -201, -166, -166, 348, 63, 16, 63, 63, 63,
	63, 361, 156, 363, 16, -182, -61, -182, -181, 58,
	-61, -181, 380, -218, -92, -220, -121, 189, -241, 27,
	-217, -218, -216, -217, -227, 199, 78, -191, -187, 36,
	-180, -238, 41, -121, -183, 139, -182, 63, 63, 365,
	-127, -181, -182, -182, -43, 382, 19, -121, 85, -218,
	382, 85, -228, 200, 199, 159, 58, 348, -246, -57,
	-181, 119, -181, 85, -2, 85, 84, 202, 201, 160,
	351, 56, -122, 135, 206, -245, 352, -168, -217, -67,
	156, 58, 85, -246, -246,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 826, 0, 528, 528, 528, 528, 528, 0, -2,
	881, 0, 0, 0, 0, -2, 518, 519, 0, 521,
	522, 1211, 1211, 1211, 1211, 1211, 528, 0, 32, 33,
	1209, 1, 3, 834, 0, 0, 532, 913, 530, 881,
	0, 0, 0, 87, 164, 0, 0, 0, 0, 0,
	879, 879, 0, 0, 0, 0, 879, 407, 408, 409,
	412, 0, 0, 0, 882, 0, 877, 0, 877, 877,
	877, 0, 477, 615, 902, 903, 904, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 0, 0, 0, 0,
	1212, 1212, 1212, 1212, 0, 1212, 506, 495, 497, 498,
	499, 500, 1212, 515, 516, 505, 517, 520, 523, 524,
	525, 526, 527, 535, 26, 838, 913, 913, 826, 28,
	0, 533, 534, 0, 546, 550, 0, 625, 913, 630,
	632, -2, -2, -2, 0, 671, 672, 673, 674, 675,
	676, 913, 913, 913, 913, 913, 913, 913, 703, 704,
	705, 706, 0, 808, 802, 810, 811, 812, 813, 814,
	815, 816, 634, 635, 0, 858, 913, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 739, 739,
	739, 739, 739, 739, 739, 739, 0, 0, 0, 0,
	0, 914, 529, 0, 0, 562, 564, 565, 566, 596,
	0, 598, 0, 0, 40, 44, 0, 1175, 862, -2,
	-2, 0, 0, 0, 900, 901, -2, 1082, -2, 898,
	899, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 0,
	165, 179, 179, 0, 0, 879, 0, 0, 879, 152,
	0, 0, 0, 0, 0, 0, 879, 0, 413, 410,
	411, 161, 0, 1212, 0, 0, 0, 0, 0, 0,
	0, 476, 0, 478, 1212, 1212, 1212, 1212, 1212, 1212,
	1212, 1212, 487, 1213, 1214, 488, 489, 490, 1212, 1212,
	492, 0, 507, 0, 501, 538, 536, 537, 27, 1210,
	22, 0, 0, 835, 0, 827, 828, 831, 834, 26,
	0, 547, 913, 913, 0, 551, 0, 553, 554, 0,
	628, 913, 0, 0, 913, 913, 913, 913, 913, 913,
	913, 913, 913, 913, 913, 913, 913, 913, 913, 0,
	0, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 631, 0, 807, 179, 645, 0, 0, 0,
	694, 695, 696, 697, 698, 699, 700, 707, 0, -2,
	809, 0, 26, 0, 669, 913, 913, 913, 913, 913,
	913, 0, 913, 538, 0, 794, 0, 0, 730, 0,
	731, 732, 733, 734, 735, 736, 737, 738, 785, 0,
	787, 788, 789, 790, 791, 792, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 285, 286, 913, -2,
	913, 913, 531, 42, 0, 614, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 606, 0, 0, 0, 0,
	597, 0, 0, 617, 1137, 599, 0, 601, 602, -2,
	0, 0, 0, 38, 39, 0, 45, 1175, 47, 72,
	0, 0, 913, 0, 343, 874, 875, 876, 872, 420,
	0, 171, 337, 333, 174, 175, 176, 177, 178, 320,
	258, -2, -2, -2, -2, -2, -2, -2, -2, 320,
	-2, -2, -2, -2, -2, 340, -2, -2, -2, -2,
	-2, 306, -2, 1097, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 172, 0,
	0, 0, 0, 0, 879, 0, 0, 155, 0, 1212,
	0, 1212, 0, 0, 0, 114, 115, 116, 0, 179,
	0, 162, 0, 0, 443, 0, 471, 878, 0, 1212,
	474, 475, 616, 905, 906, 479, 480, 481, 482, 483,
	484, 485, 486, 491, 494, 508, 502, 503, 496, 540,
	539, 839, 0, 913, 913, 0, 913, 830, 832, 833,
	838, 29, 24, 626, 627, 629, 646, 0, 648, 650,
	552, 548, 0, 803, -2, 636, 637, 665, 666, 667,
	0, 913, 913, 913, 663, 641, 0, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 691,
	750, 751, 692, 0, 702, 320, 322, 322, 322, 324,
	324, 275, 276, 0, 320, 320, 251, 252, -2, -2,
	-2, 337, 689, 248, 0, 690, 701, 0, 0, 913,
	0, 0, 544, 550, 805, 668, 913, 857, 26, 0,
	0, 0, 0, -2, -2, -2, -2, -2, -2, 759,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 0, 673, 0, 0, 802, 0, 0, 913,
	800, 797, 913, 0, 0, 740, 786, 0, 0, 543,
	0, 0, 0, 0, 613, 621, 859, 0, 563, 592,
	594, 0, 589, 604, 605, 607, 0, 609, 0, 611,
	612, 567, 568, 569, 0, 0, 0, 0, 600, 621,
	0, 621, 41, 863, 46, 0, 0, 75, 76, 864,
	865, 866, 0, 868, 344, 0, 163, 422, 0, 425,
	166, 167, 168, 169, 170, 0, 414, -2, 1142, 1165,
	1100, 0, 0, 381, 382, 181, 0, 183, 0, 185,
	0, 187, 188, 0, 190, 192, 414, 0, 0, 0,
	0, 0, 0, 180, 0, 339, 335, 334, 257, 0,
	340, 340, 320, 340, 0, 340, 340, 294, 295, 343,
	0, 343, 343, 343, 343, 0, 0, 330, 330, 280,
	281, 282, 269, 0, 322, 271, 272, 273, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 97, 0, 153, 154, 98, 880, 99, 137, 0,
	121, 118, 119, 120, 0, 117, 103, 0, 1211, 150,
	0, 893, 444, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 0, 0, 470, 1212, 473, 511, 0,
	0, 913, 541, 0, 836, 837, 0, 829, 23, 647,
	649, 651, 0, -2, 638, 663, 642, 0, 639, 913,
	913, 0, 633, -2, 250, 0, 0, 256, 0, 916,
	248, 708, 0, 913, 555, 712, 670, -2, 713, 714,
	0, 0, 913, 752, 1209, 340, 756, 757, 760, 762,
	763, 765, 770, 776, 777, 780, 783, 784, 0, 913,
	913, 913, 913, 913, 0, 0, 826, 0, 798, 913,
	0, 728, 729, 741, 742, 743, 744, 851, 0, 0,
	-2, 0, 0, 826, 0, 913, 913, 586, 593, 913,
	0, 587, 913, 588, 608, 610, 579, 0, 0, 0,
	0, 0, 584, 826, 621, 37, 73, 74, 0, 0,
	80, 913, 345, 0, 426, 420, 424, 0, 391, 0,
	0, 0, 417, 372, 0, 0, 375, 0, 377, -2,
	403, 182, 0, 0, 0, 189, 191, 0, 195, 196,
	0, 224, 0, 0, 206, 0, 209, -2, 212, 213,
	214, 248, 216, 217, 218, 1131, 221, 320, 320, 244,
	1103, 0, 0, 222, 223, 338, 173, 336, 0, 343,
	343, 340, 343, 0, 0, 343, 343, 296, 0, 297,
	298, 299, 300, 0, 318, 0, 278, 279, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	157, 0, 140, 0, 0, 0, 0, 0, 431, 0,
	416, 435, 1211, 0, 151, 458, 459, 460, 461, 462,
	463, 464, 1211, 0, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 0, 1211, 894, 895, 896,
	897, 0, 0, 472, 493, 0, 913, 509, 510, 560,
	840, 0, 549, 804, 0, 640, 913, 664, 643, 0,
	0, 0, 915, 0, 918, 709, 545, 710, 0, 0,
	320, 320, 755, 320, 324, 758, 320, 761, 320, 764,
	766, 767, 768, 769, 324, 771, 772, 773, 774, 775,
	320, 320, 778, 779, 320, 782, 320, 320, 0, 0,
	753, 754, 0, 0, 0, 0, 0, 0, 803, 0,
	795, 727, 801, 913, 30, 0, 851, 841, 853, 855,
	913, 26, 0, 847, 0, 834, 860, 622, 861, 590,
	0, 595, 0, 0, 0, 0, 598, 0, 834, 36,
	77, 78, 79, 867, 0, 427, 423, 0, 385, 320,
	320, 0, 0, 0, 0, 0, 0, 373, 374, 376,
	379, 403, 404, 405, 205, 184, 414, 186, 0, 913,
	0, 0, 225, 0, 0, 0, 0, 211, 179, 215,
	0, 240, 0, 242, 0, 0, 0, 321, 287, 288,
	343, 289, 328, 329, 290, 291, 341, 342, 340, 0,
	340, 0, 325, 0, 0, 0, 0, 0, 383, 384,
	320, 0, 0, -2, 0, -2, 0, 0, 0, 0,
	138, 139, 0, 122, 0, 105, 0, 456, 457, 417,
	437, 0, 438, 440, 441, 442, 0, 416, 436, 512,
	513, 621, 0, 711, 644, 693, 331, 332, 917, 0,
	715, 718, 716, 717, 719, 913, 913, 722, 913, 913,
	913, 0, 0, 799, 0, 31, 0, 856, -2, 0,
	0, 0, 43, 34, 0, 581, 582, 0, 571, 573,
	574, 575, 576, 577, 578, 0, 0, 0, 617, 585,
	35, 421, 428, 429, 430, 347, 0, 831, 389, 390,
	388, 414, 397, 398, 0, 0, 414, 415, 416, 403,
	913, 380, 0, 0, 0, 913, 202, 0, 207, 0,
	248, 0, 210, 178, 219, 241, 243, 245, 0, 293,
	343, 319, 343, 0, 0, 0, 0, 0, 623, 0,
	0, -2, 158, 159, 0, 141, 142, 143, 144, 145,
	0, 0, 104, 107, 0, 0, 0, 0, 417, 817,
	561, 556, 0, 0, 0, 0, 0, 0, 0, 745,
	726, 796, 0, 854, 0, -2, 0, 849, 848, 0,
	591, 570, 0, 618, 619, 620, 569, 369, 348, 0,
	350, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 387, 392, 0, 399, 400, 393, 0, 0,
	417, 0, 0, 913, 246, 197, 0, 226, 0, 0,
	308, 309, 323, 326, 623, 0, 0, 621, 0, 0,
	621, 146, 418, 0, 102, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 826, 0, 528, 0, 0,
	0, 60, 913, 913, 869, 0, -2, 107, 107, -2,
	107, 107, 0, 0, 0, 0, 0, 819, 0, 557,
	0, 558, 913, 721, 720, 723, 724, 0, 0, 0,
	0, 844, 26, 0, 583, 572, 580, 346, 0, 351,
	0, 0, 0, 354, 0, 366, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	193, 0, 0, 0, 0, 204, 208, 621, 0, 0,
	347, 0, 623, 347, 148, 0, 913, 0, 124, 834,
	48, -2, 50, 0, 919, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 55, 56, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 625, 106, 108,
	-2, 109, 110, 111, 112, 113, 0, 0, 152, 0,
	466, 0, 0, 25, 913, 913, 559, 822, 823, 825,
	725, 0, 0, 0, 852, -2, 850, 370, 0, 352,
	357, 355, 358, 367, 368, 359, 360, 361, 362, 363,
	364, 414, 414, 0, 0, 402, 246, 247, 0, 0,
	200, 201, 203, 0, 0, 0, 0, 0, 0, 237,
	0, 347, 621, 347, 369, 0, 621, 369, 100, 0,
	419, 147, 101, 135, 0, 838, 0, 0, 52, 54,
	870, 0, 58, 61, 62, 63, 64, 65, 0, 0,
	0, 432, 907, 155, 465, 0, 0, 0, 820, 818,
	913, 746, 0, 749, 0, 349, 0, 394, 395, 0,
	347, 194, 198, 199, 0, 228, 0, 230, 231, 232,
	233, 234, 235, 236, 0, 369, 347, 91, 89, 624,
	347, 93, 913, 0, 134, 51, 179, 0, 920, 0,
	0, 67, 0, 0, 910, 908, 0, 439, 467, 0,
	0, 824, 747, 0, 353, 0, 369, 227, 229, 238,
	0, 88, 92, 369, 149, 0, 0, 59, 66, 68,
	0, 70, 434, 0, 909, 0, 433, 0, 371, 0,
	401, 0, 90, 136, -2, 0, 0, 911, 912, 0,
	0, 0, 239, 69, 0, 913, 748, 0, 0, 0,
	0, 396, 71, 468, 469,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:427
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:431
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:454
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:462
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:468
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:475
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:485
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:495
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:502
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:514
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:536
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:546
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:550
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:555
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:556
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:560
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:564
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:569
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:573
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:614
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:618
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:624
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:633
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:639
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:653
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:660
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:668
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:678
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:700
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:707
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:728
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:737
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:745
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:756
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:766
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:770
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:780
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:788
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:792
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:797
		{
			yyVAL.str = ""
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:801
		{
			yyVAL.str = yyDollar[3].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:807
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:817
		{
			yyVAL.str = SessionStr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:821
		{
			yyVAL.str = GlobalStr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:832
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:852
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:872
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:893
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:909
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 93:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:926
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:945
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:953
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:962
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:970
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:978
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:982
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:986
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:998
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1009
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1020
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1031
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1036
		{
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1037
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1041
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1043
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1044
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1045
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1046
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1051
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1055
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1063
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1069
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1073
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1077
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1083
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1087
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1093
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1097
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1103
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1115
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1127
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1134
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1138
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1142
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1147
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1151
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1155
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1159
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1167
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1172
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1176
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1181
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1185
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1190
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1194
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1199
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1203
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1209
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1214
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1219
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1225
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1230
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1236
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1241
		{
			yyVAL.bytes = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1245
		{
			yyVAL.bytes = nil
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1251
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1258
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1264
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1268
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1273
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1277
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1281
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1285
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1289
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1300
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1306
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1317
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1328
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1341
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1346
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1351
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1356
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1362
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1367
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1372
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1377
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1382
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1387
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1392
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1397
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1402
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1411
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1421
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1426
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1431
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1438
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1445
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1453
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1458
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1464
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1470
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1476
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1482
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1489
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1493
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1497
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1501
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1505
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1511
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1515
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1519
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1523
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1527
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1531
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1535
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1539
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1543
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1547
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1553
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1559
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1565
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1571
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1575
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1580
		{
			yyVAL.sequence = &Sequence{}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1584
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1589
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1594
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1599
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1604
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1609
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1614
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1619
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1624
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1629
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1634
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1639
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1644
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1651
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1655
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1659
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1663
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1671
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1676
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1680
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1685
		{
			yyVAL.bytes = nil
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1971
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1976
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1981
		{
			yyVAL.optVal = nil
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1985
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1990
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2002
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2006
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2012
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2020
		{
			yyVAL.optVal = nil
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2024
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2028
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2045
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2050
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2059
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2063
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2068
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2072
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2076
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2081
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2085
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2089
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2094
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2098
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2102
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2108
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2117
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2127
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2131
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2137
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2141
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2147
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2151
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2156
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2160
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2164
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2168
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2172
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2180
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2184
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2188
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2194
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2204
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2208
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2214
		{
			yyVAL.indexPartition = nil
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2218
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2222
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2228
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2232
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2236
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2240
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2244
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2248
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2252
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2256
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2260
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2270
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2276
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2287
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2291
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2297
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2302
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2306
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2316
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2321
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2328
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 394:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2335
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 395:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2342
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 396:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2351
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2363
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2367
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2371
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2375
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 401:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2381
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 402:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2392
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2402
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2406
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2410
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2416
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2420
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2424
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2428
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2432
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2436
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2442
		{
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2443
		{
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2447
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2451
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2456
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2463
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2467
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2474
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2478
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2484
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2488
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2493
		{
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2494
		{
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2498
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2502
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2508
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2512
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2516
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2522
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 433:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2540
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 434:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2573
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2582
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2591
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2595
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 439:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2612
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2622
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2627
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2632
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2636
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 465:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2668
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2674
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2678
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2684
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2688
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2694
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2700
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2708
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2713
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2721
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2725
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2731
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2735
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2740
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2746
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2754
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2759
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2763
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2771
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2775
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2779
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2783
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2787
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2795
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2803
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2813
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2825
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2829
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2833
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2837
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2847
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2863
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2867
		{
			yyVAL.str = "extended "
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2877
		{
			yyVAL.str = "full "
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2883
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2887
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2891
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2897
		{
			yyVAL.showFilter = nil
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2901
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2905
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2911
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2915
		{
			yyVAL.str = SessionStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2919
		{
			yyVAL.str = GlobalStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2925
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2929
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2935
		{
			yyVAL.statement = &Begin{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2939
		{
			yyVAL.statement = &Begin{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2945
		{
			yyVAL.statement = &Commit{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.statement = &Rollback{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2957
		{
			yyVAL.statement = &OtherRead{}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2961
		{
			yyVAL.statement = &OtherRead{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2965
		{
			yyVAL.statement = &OtherRead{}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2969
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2973
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2978
		{
			setAllowComments(yylex, true)
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2982
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2988
		{
			yyVAL.bytes2 = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2992
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2998
		{
			yyVAL.str = UnionStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3002
		{
			yyVAL.str = UnionAllStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3006
		{
			yyVAL.str = UnionDistinctStr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3011
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3015
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3019
		{
			yyVAL.str = SQLCacheStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.str = DistinctStr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.str = StraightJoinHint
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3042
		{
			yyVAL.selectExprs = nil
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3052
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3056
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3062
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3066
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3070
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3074
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3079
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3087
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3094
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3099
		{
			yyVAL.overExpr = nil
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3103
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3107
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3111
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3115
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3120
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3124
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3134
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3144
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3148
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3152
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3157
		{
			yyVAL.strs = []string{}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3161
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3167
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3171
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3193
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3203
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3207
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3213
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3218
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3222
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3232
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3245
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3249
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3253
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3257
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3263
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3265
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3269
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3271
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3275
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3277
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3280
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3282
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3285
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3289
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3293
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3310
		{
			yyVAL.str = JoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3314
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3320
		{
			yyVAL.str = StraightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3326
		{
			yyVAL.str = LeftJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3330
		{
			yyVAL.str = LeftJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3334
		{
			yyVAL.str = RightJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3338
		{
			yyVAL.str = RightJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3344
		{
			yyVAL.str = NaturalJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3348
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3358
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3362
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3368
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3372
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3377
		{
			yyVAL.indexHints = nil
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3381
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3385
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3389
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3394
		{
			yyVAL.expr = nil
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3398
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3403
		{
			yyVAL.columns = nil
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3407
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3413
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3417
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3421
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3425
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3429
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3433
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3437
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3443
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3447
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3453
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3457
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3463
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3467
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3471
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3475
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3491
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3495
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3499
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3505
		{
			yyVAL.str = IsNullStr
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3509
		{
			yyVAL.str = IsNotNullStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3513
		{
			yyVAL.str = IsTrueStr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3517
		{
			yyVAL.str = IsNotTrueStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3521
		{
			yyVAL.str = IsFalseStr
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3525
		{
			yyVAL.str = IsNotFalseStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3531
		{
			yyVAL.str = EqualStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3535
		{
			yyVAL.str = LessThanStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3539
		{
			yyVAL.str = GreaterThanStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3543
		{
			yyVAL.str = LessEqualStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3547
		{
			yyVAL.str = GreaterEqualStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3551
		{
			yyVAL.str = NotEqualStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3555
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3559
		{
			yyVAL.str = PosixRegexStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3563
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3567
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3571
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3576
		{
			yyVAL.expr = nil
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3580
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3586
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3590
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3594
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3600
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3606
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3610
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3620
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3624
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3628
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3632
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3636
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3696
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3700
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 693:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3704
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3708
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3712
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3716
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3738
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3742
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3746
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3754
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3762
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3770
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3780
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3784
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3788
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3792
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3796
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3814
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3818
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3822
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3826
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3830
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 720:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3834
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 721:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3838
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3842
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 723:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3846
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 724:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3850
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 725:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3854
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 726:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3858
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3862
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3866
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3871
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3898
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3903
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3917
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3931
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3949
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3953
		{
			yyVAL.str = BooleanModeStr
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3957
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 748:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3961
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3965
		{
			yyVAL.str = QueryExpansionStr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4055
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4059
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4063
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4067
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4071
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4075
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4079
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4083
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4087
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4091
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4095
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4099
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4125
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4129
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4133
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4137
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4141
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4145
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4150
		{
			yyVAL.expr = nil
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4154
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4159
		{
			yyVAL.str = string("")
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4163
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4169
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4173
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4179
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4184
		{
			yyVAL.expr = nil
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4188
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4194
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4198
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4202
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4208
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4214
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4218
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4222
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4227
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4232
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4236
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4240
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4244
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4248
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4252
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4256
		{
			yyVAL.expr = &NullVal{}
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4261
		{
			yyVAL.exprs = nil
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4265
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4270
		{
			yyVAL.expr = nil
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4274
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4279
		{
			yyVAL.partitionBy = nil
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4283
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4289
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4293
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4299
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4304
		{
			yyVAL.orderBy = nil
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4308
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4314
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4318
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4324
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4329
		{
			yyVAL.str = AscScr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4333
		{
			yyVAL.str = AscScr
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4337
		{
			yyVAL.str = DescScr
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4342
		{
			yyVAL.limit = nil
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4346
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4350
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4354
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4359
		{
			yyVAL.str = ""
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4363
		{
			yyVAL.str = ForUpdateStr
		}
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4367
		{
			yyVAL.str = ShareModeStr
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4380
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4384
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4388
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4393
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4397
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 846:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4401
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4408
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4412
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4416
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4420
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4425
		{
			yyVAL.updateExprs = nil
		}
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4429
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4435
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4439
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4445
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4449
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4455
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4461
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4471
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4475
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4481
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4487
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4491
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4497
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4501
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4505
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 867:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4520
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4526
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4533
		{
			yyVAL.bytes = []byte("charset")
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4540
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4544
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4548
		{
			yyVAL.expr = &Default{}
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4553
		{
			yyVAL.byt = 0
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4555
		{
			yyVAL.byt = 1
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4558
		{
			yyVAL.empty = struct{}{}
		}
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4560
		{
			yyVAL.empty = struct{}{}
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4563
		{
			yyVAL.str = ""
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4565
		{
			yyVAL.str = IgnoreStr
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4569
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4571
		{
			yyVAL.empty = struct{}{}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4573
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4575
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4577
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4579
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4581
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4583
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4585
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4587
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4590
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4592
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4594
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4598
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4600
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4604
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4608
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4615
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4621
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4625
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4630
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4637
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4643
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4647
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4651
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4657
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4661
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4665
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4671
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4675
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4682
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4689
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4693
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4700
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4706
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4710
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5026
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5035
		{
			decNesting(yylex)
		}
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5040
		{
			forceEOF(yylex)
		}
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5045
		{
			forceEOF(yylex)
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5049
		{
			forceEOF(yylex)
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5053
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
